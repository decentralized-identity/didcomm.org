{
    "componentChunkName": "component---src-templates-protocol-protocol-tsx",
    "path": "/basicmessage/2.0/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"Roles\">Roles</h2>\n<p>There are two roles in this protocol: <code>sender</code> and <code>receiver</code>. It is anticipated that both roles are supported by agents that provide an interface for humans, but it is possible for an agent to only act as a sender (do not process received messages) or a receiver (will never send messages).</p>\n<h2 id=\"Connectivity\">Connectivity</h2>\n<p>There are no assumptions about this protocol. It can be used to send a message, and there is no protocol level expectation of a response.</p>\n<h2 id=\"States\">States</h2>\n<p>There are not really states in this protocol, as sending a message leaves both parties in the same state they were before.</p>\n<h2 id=\"Basic-Walkthrough\">Basic Walkthrough</h2>\n<p>Using this protocol, either party can send a message to the other at any time. There are no rules about taking turns or requiring a response.</p>\n<p>Messages are assumed to be made visible to the recipient or evaluated by automated processes.</p>\n<h2 id=\"Design-By-Contract\">Design By Contract</h2>\n<p>No protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.</p>\n<h2 id=\"Security\">Security</h2>\n<p>This protocol expects messages to be encrypted during transmission, and repudiable.</p>\n<h2 id=\"Composition\">Composition</h2>\n<table>\n<thead>\n<tr>\n<th>Supported Goal Code</th>\n<th>Notes</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"Message-Reference\">Message Reference</h2>\n<p><strong>message</strong></p>\n<p>Message Type URI: <code>https://didcomm.org/basicmessage/2.0/message</code></p>\n<p>The <code>message</code> message is sent by the <code>sender</code> to the <code>recipient</code>. Note that the role is only specific to the creation of messages, and that both parties may play both roles.</p>\n<p>Attributes:</p>\n<p><code>content</code> - content of the user intended message.</p>\n<p>Supported decorators/headers:</p>\n<ul>\n<li>The message should indicate the language used in the message. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.</li>\n<li>The time the message is sent must be included. DIDComm V2 uses the <code>created_time</code> header. DIDComm V1 must include a <code>sent_time</code> as a message attribute containing the timestamp in ISO 8601 UTC format.</li>\n</ul>\n<p>DIDComm V1 Example:</p>\n<pre><code class=\"language-json\">{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"content\": \"Your hovercraft is full of eels.\"\n}\n</code></pre>\n<p>DIDComm V2 Example:</p>\n<pre><code class=\"language-json\">{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"lang\": \"en\",\n    \"created_time\": 1547577721,\n    \"body\": {\n        \"content\": \"Your hovercraft is full of eels.\"\n    }\n}\n</code></pre>\n<h2 id=\"L10n\">L10n</h2>\n<p>The language  SHOULD be specified according to the method used in the DIDComm base protocol version.</p>\n<h2 id=\"Implementations\">Implementations</h2>\n<h2 id=\"Endnotes\">Endnotes</h2>\n<h4 id=\"1-Out-of-Scope\">1 Out of Scope</h4>\n<p>There are many useful features of user messaging systems that we will not be adding to this protocol. We anticipate the development of more advanced and full-featured message protocols to fill these needs. Features that are considered out of scope for this protocol include:</p>\n<ul>\n<li>read receipts</li>\n<li>emojii responses</li>\n<li>typing indicators</li>\n<li>message replies (threading)</li>\n<li>multi-party (group) messages</li>\n<li>attachments</li>\n</ul>","frontmatter":{"title":"BasicMessage","tags":[],"license":"MIT","publisher":"TelegramSam","status":"Production","piuri":"https://didcomm.org/basicmessage/2.0","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","authors":[{"name":"Sam Curren","email":"telegramsam@gmail.com"}]},"fields":{"modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0"}}},"pageContext":{"matchPath":"basicmessage/2.0/*","id":"b3b5d96e-9381-5446-ad91-bd9d7d734ed1","html":"<h2 id=\"Roles\">Roles</h2>\n<p>There are two roles in this protocol: <code>sender</code> and <code>receiver</code>. It is anticipated that both roles are supported by agents that provide an interface for humans, but it is possible for an agent to only act as a sender (do not process received messages) or a receiver (will never send messages).</p>\n<h2 id=\"Connectivity\">Connectivity</h2>\n<p>There are no assumptions about this protocol. It can be used to send a message, and there is no protocol level expectation of a response.</p>\n<h2 id=\"States\">States</h2>\n<p>There are not really states in this protocol, as sending a message leaves both parties in the same state they were before.</p>\n<h2 id=\"Basic-Walkthrough\">Basic Walkthrough</h2>\n<p>Using this protocol, either party can send a message to the other at any time. There are no rules about taking turns or requiring a response.</p>\n<p>Messages are assumed to be made visible to the recipient or evaluated by automated processes.</p>\n<h2 id=\"Design-By-Contract\">Design By Contract</h2>\n<p>No protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.</p>\n<h2 id=\"Security\">Security</h2>\n<p>This protocol expects messages to be encrypted during transmission, and repudiable.</p>\n<h2 id=\"Composition\">Composition</h2>\n<table>\n<thead>\n<tr>\n<th>Supported Goal Code</th>\n<th>Notes</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"Message-Reference\">Message Reference</h2>\n<p><strong>message</strong></p>\n<p>Message Type URI: <code>https://didcomm.org/basicmessage/2.0/message</code></p>\n<p>The <code>message</code> message is sent by the <code>sender</code> to the <code>recipient</code>. Note that the role is only specific to the creation of messages, and that both parties may play both roles.</p>\n<p>Attributes:</p>\n<p><code>content</code> - content of the user intended message.</p>\n<p>Supported decorators/headers:</p>\n<ul>\n<li>The message should indicate the language used in the message. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.</li>\n<li>The time the message is sent must be included. DIDComm V2 uses the <code>created_time</code> header. DIDComm V1 must include a <code>sent_time</code> as a message attribute containing the timestamp in ISO 8601 UTC format.</li>\n</ul>\n<p>DIDComm V1 Example:</p>\n<pre><code class=\"language-json\">{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"content\": \"Your hovercraft is full of eels.\"\n}\n</code></pre>\n<p>DIDComm V2 Example:</p>\n<pre><code class=\"language-json\">{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"lang\": \"en\",\n    \"created_time\": 1547577721,\n    \"body\": {\n        \"content\": \"Your hovercraft is full of eels.\"\n    }\n}\n</code></pre>\n<h2 id=\"L10n\">L10n</h2>\n<p>The language  SHOULD be specified according to the method used in the DIDComm base protocol version.</p>\n<h2 id=\"Implementations\">Implementations</h2>\n<h2 id=\"Endnotes\">Endnotes</h2>\n<h4 id=\"1-Out-of-Scope\">1 Out of Scope</h4>\n<p>There are many useful features of user messaging systems that we will not be adding to this protocol. We anticipate the development of more advanced and full-featured message protocols to fill these needs. Features that are considered out of scope for this protocol include:</p>\n<ul>\n<li>read receipts</li>\n<li>emojii responses</li>\n<li>typing indicators</li>\n<li>message replies (threading)</li>\n<li>multi-party (group) messages</li>\n<li>attachments</li>\n</ul>"}},
    "staticQueryHashes": ["3000541721","3766577012"],
    "matchPath": "basicmessage/2.0/*"}