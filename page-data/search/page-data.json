{
    "componentChunkName": "component---src-templates-search-search-tsx",
    "path": "/search/",
    "result": {"pageContext":{"allProtocols":[{"slug":"action-menu/2.0/","title":"Action Menu","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol that allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/action-menu/2.0","html":"Summary\nThe action-menu protocol allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way. The protocol allows limited service discovery as well as simple data entry. While less flexible than HTML forms or a chat bot, it should be relatively easy to implement and provides a user interface which can be adapted for various platforms, including mobile agents.\nMotivation\nDiscovery of a peer Agent's capabilities or service offerings is currently reliant on knowledge obtained out-of-band. There is no in-band DIDComm supported protocol for querying a peer to obtain a human freindly menu of their capabilities or service offerings. Whilst this protocol doesn't offer ledger wide discovery capabilities, it will allow one User Agent connected to another, to present a navigable menu and request offered services. The protocol also provides an interface definition language to define action menu display, selection and request submission.\nRoles\nThere are two roles in this protocol:\n\nrequester : The requester asks the responder for menu definitions, presents them to a user, and initiates subsequent action items from the menu through further requests to the responder.\nresponder : The responder presents an initial menu definition containing actionable elements to a requester and then responds to subsequent action requests from the menu.\n\nBasic Walkthrough\nThe action-menu protocol requires an active DIDComm connection before it can proceed. One Agent behaves as a requester in the protocol whilst the other Agent represents a responder. Conceptually the responder presents a list of actions which can be initiated by the requester. Actions are contained within a menu structure. Individual Actions may result in traversal to another menu or initiation of other protocols such as a presentation request, an introduction proposal, a credential offer, an acknowledgement, or a problem report.\nThe protocol can be initiated by either the requester asking for the root menu or the responder sending an unsolicited root menu. The protocol ends when the requester issues a perform operation or an internal timeout on the responder causes it to discard menu context. At any time a requester can reset the protocol by requesting the root menu from a responder.\nWhilst the protocol is defined here as uni-directional (i.e requester to responder), both Agents may support both requester and responder roles simultaneously. Such cases would result in two instances of the action-menu protocol operating in parrallel.\nStates\n\nStates for Requester\n\nState\nDescription\n\nnull\nNo menu has been requested or received\n\nawaiting-root-menu\nmenu-request message has been sent and awaiting root menu response\n\npreparing-selection\nmenu message has been received and a user selection is pending\n\ndone\nperform message has been sent and protocol has finished. Perform actions can include requesting a new menu which will re-enter the state machine with the receive-menu event from the null state.\n\nStates for Responder\n\nState\nDescription\n\nnull\nNo menu has been requested or sent\n\npreparing-root-menu\nmenu-request message has been received and preparing menu response for root menu\n\nawaiting-selection\nmenu message has been sent and are awaiting a perform request\n\ndone\nperform message has been received and protocol has finished. Perform actions can include requesting a new menu which will re-enter the state machine with the send-menu event from the null state.\n\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\nMessage Reference\nMenu\nA requester is expected to display only one active menu per connection when action menus are employed by the responder. A newly received menu is not expected to interrupt a user, but rather be made available for the user to inspect possible actions related to the responder.\nMessage Type URI: https://didcomm.org/action-menu/2.0/menu\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu\",\n  \"id\": \"5678876542344\",\n  \"body\": {\n    \"title\": \"Welcome to IIWBook\",\n    \"description\": \"IIWBook facilitates connections between attendees by verifying attendance and distributing connection invitations.\",\n    \"errormsg\": \"No IIWBook names were found.\",\n    \"options\": [\n        {\n        \"name\": \"obtain-email-cred\",\n        \"title\": \"Obtain a verified email credential\",\n        \"description\": \"Connect with the BC email verification service to obtain a verified email credential\"\n        },\n        {\n        \"name\": \"verify-email-cred\",\n        \"title\": \"Verify your participation\",\n        \"description\": \"Present a verified email credential to identify yourself\"\n        },\n        {\n        \"name\": \"search-introductions\",\n        \"title\": \"Search introductions\",\n        \"description\": \"Your email address must be verified to perform a search\",\n        \"disabled\": true\n        }\n    ]\n  }\n}\n\nwhere:\n\ntitle : plain text string, should be displayed at the top of the menu\n\ndescription -- plain text string, should be shown in smaller text below the title bar\n\nerrormsg : optional plain text string sent to indicate that the last perform request did not work as expected. The text should be presented to the user in the title section\noptions : one or more available actions which the responder supports and may be requested in a perform message.\ndisabled : optional indication that an option is unavailable due to certain requirements not yet being met\n\nQuick forms\nMenu options may define a form property, which would direct the requester user to a client-generated form when the menu option is selected. The menu title should be shown at the top of the form, followed by the form description text if defined, followed by the list of form params in sequence. The form should also include a Cancel button to return to the menu, a Submit button (with an optional custom label defined by submit-label), and optionally a Clear button to reset the parameters to their default values.\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu\",\n  \"id\": \"5678876542347\",\n  \"thid\": \"5678876542344\",\n  \"title\": \"Attendance Verified\",\n  \"body\": {\n    \"description\": \"\",\n    \"options\": [\n        {\n        \"name\": \"submit-invitation\",\n        \"title\": \"Submit an invitation\",\n        \"description\": \"Send an invitation for IIWBook to share with another participant\"\n        },\n        {\n        \"name\": \"search-introductions\",\n        \"title\": \"Search introductions\",\n        \"form\": {\n            \"description\": \"Enter a participant name below to perform a search.\",\n            \"params\": [\n            {\n                \"name\": \"query\",\n                \"title\": \"Participant name\",\n                \"default\": \"\",\n                \"description\": \"\",\n                \"required\": true,\n                \"type\": \"text\"\n            }\n            ],\n            \"submit-label\": \"Search\"\n        }\n        }\n    ]\n  }\n}\n\nWhen the form is submitted, a perform message is generated containing values entered in the form. The form block may have an empty or missing params property in which case it acts as a simple confirmation dialog.\nEach entry in the params list must define a name and title. The description is optional (should be displayed as help text below the field) and the type defaults to ‘text’ if not provided (only the ‘text’ type is supported at this time). Parameters should default to required true, if not specified. Parameters may also define a default value (used when rendering or clearing the form).\nMenu Request\nIn addition to menus being pushed by the responder, the root menu can be re-requested at any time by the requester sending a menu-request.\nMessage Type URI: https://didcomm.org/action-menu/2.0/menu-request\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu-request\",\n  \"id\": \"5678876542347\",\n}\n\nPerform\nWhen the requester user actions a menu option, a perform message is generated. It should be attached to the same thread as the menu. The active menu should close when an option is selected.\nThe response to a perform message can be any type of agent message, including another menu message, a presentation request, an introduction proposal, a credential offer, an acknowledgement, or a problem report. Whatever the message type, it should normally reference the same message thread as the perform message.\nMessage Type URI: https://didcomm.org/action-menu/2.0/perform\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/perform\",\n  \"id\": \"5678876542346\",\n  \"thid\": \"5678876542344\"\n  \"body\":{\n    \"name\": \"obtain-email-cred\",\n    \"params\": {}\n  }\n}\n\nwhere:\n\nname : the menu option being requested. This is taken from the name attribute of the options array elements in the menu\nparams : optional dictionary containing any input parameters requested in a menu option form section. The dictionary key values are taken from the name attributes of params array elements in the menu option form.\n\nL10n\nLocalization may be implemented by means of L10n extension\nImplementations\nEndnotes\nFuture Considerations\n\nThere needs to be some consideration around how the protocol may terminate due to responder side timeouts since maintaining menu context for connections consumes resources. Adoption of Report Problem Protocol 2.0 is a viable solution"},{"slug":"action-menu/1.0/","title":"Action Menu","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol that allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/action-menu/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/blob/main/features/0509-action-menu/README.md\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 2.0 version of this protocol that complies with DIDComm v2 headers. Version 2.0 can be found here"},{"slug":"basicmessage/1.0/","title":"Basic Message","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"1.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0095-basic-message\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 2.0 version of this protocol that also complies with DIDComm v2 headers. Version 2.0 can be found here"},{"slug":"basicmessage/2.0/","title":"BasicMessage","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/2.0","html":"Roles\nThere are two roles in this protocol: sender and receiver. It is anticipated that both roles are supported by agents that provide an interface for humans, but it is possible for an agent to only act as a sender (do not process received messages) or a receiver (will never send messages).\nConnectivity\nThere are no assumptions about this protocol. It can be used to send a message, and there is no protocol level expectation of a response.\nStates\nThere are not really states in this protocol, as sending a message leaves both parties in the same state they were before.\nBasic Walkthrough\nUsing this protocol, either party can send a message to the other at any time. There are no rules about taking turns or requiring a response.\nMessages are assumed to be made visible to the recipient or evaluated by automated processes.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\nMessage Reference\nmessage\nMessage Type URI: https://didcomm.org/basicmessage/2.0/message\nThe message message is sent by the sender to the recipient. Note that the role is only specific to the creation of messages, and that both parties may play both roles.\nAttributes:\ncontent - content of the user intended message.\nSupported decorators/headers:\n\nThe message should indicate the language used in the message. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.\nThe time the message is sent must be included. DIDComm V2 uses the created_time header. DIDComm V1 must include a sent_time as a message attribute containing the timestamp in ISO 8601 UTC format.\n\nDIDComm V1 Example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"content\": \"Your hovercraft is full of eels.\"\n}\n\nDIDComm V2 Example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"lang\": \"en\",\n    \"created_time\": 1547577721,\n    \"body\": {\n        \"content\": \"Your hovercraft is full of eels.\"\n    }\n}\n\nL10n\nThe language  SHOULD be specified according to the method used in the DIDComm base protocol version.\nImplementations\nEndnotes\n1 Out of Scope\nThere are many useful features of user messaging systems that we will not be adding to this protocol. We anticipate the development of more advanced and full-featured message protocols to fill these needs. Features that are considered out of scope for this protocol include:\n\nread receipts\nemojii responses\ntyping indicators\nmessage replies (threading)\nmulti-party (group) messages\nattachments"},{"slug":"coordinate-mediation/1.0/","title":"Coordinate Mediation","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol to coordinate mediation configuration between a mediating agent and the recipient.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/coordinate-mediation/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0211-route-coordination\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 2.0 version of this protocol that complies also with DIDComm v2 headers. Version 2.0 can be found here"},{"slug":"coordinate-mediation/2.0/","title":"Coordinate Mediation","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol to coordinate mediation configuration between a mediating agent and the recipient.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/coordinate-mediation/2.0","html":"Motivation\nUse of the forward message in the Routing Protocol 2.0 requires an exchange of information. The Recipient must know which endpoint and routing key(s) to share, and the Mediator needs to know which keys should be routed via this relationship.\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that will be receiving forward messages on behalf of the recipient.\nrecipient : The agent for whom the forward message payload is intended.\n\nRequirements\nThe return_route extension must be supported by both agents ( recipient and mediator).\nThe common use of this protocol is for the reply messages from the mediator to be synchronous, utilizing the same connection channel for the reply. In order to have this synchronous behavior the recipient should specify return_route header to all.\nThis header must be set each time the communication channel is established: once per established websocket, and every message for an HTTP POST.\nConnectivity\nThis protocol consists of three different message requests from the recipient that should be replied by the mediator :\n\nMediate Request -> Mediate Grant or Mediate Deny\nKeylist Update -> Keylist Update Response\nKeylist Query -> Keylist\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requerires the simple state of waiting for a response or to produce a response.\nBasic Walkthrough\nA recipient may discover an agent capable of routing using the Discover Features Protocol 2.0. If protocol is supported with the mediator, a recipient may send a mediate-request to initiate a routing relationship.\nFirst, the recipient sends a mediate-request message to the mediator. If the mediator is willing to route messages, it will respond with a mediate-grant message, otherwise with a mediate-deny message. The recipient will share the routing information in the grant message with other contacts.\nWhen a new key is used by the recipient, it must be registered with the mediator to enable route identification. This is done with a keylist-update message.\nThe keylist-update and keylist-query methods are used over time to identify and remove keys that are no longer in use by the recipient.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\nMessage Reference\nMediate Request\nThis message serves as a request from the recipient to the mediator, asking for the permission (and routing information) to publish the endpoint as a mediator.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-request\",\n    \"return_route\": \"all\"\n}\n\nMediate Deny\nThis message serves as notification of the mediator denying the recipient 's request for mediation.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-deny\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-deny\",\n}\n\nMediate Grant\nA mediate grant message is a signal from the mediator to the recipient that permission is given to distribute the included information as an inbound route.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-grant\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-grant\",\n    \"body\": {\n        \"routing_did\": \"did:peer:z6Mkfriq1MqLBoPWecGoDLjguo1sB9brj6wT3qZ5BxkKpuP6\"\n    }\n}\n\nwhere:\n\nrouting_did : DID of the mediator where forwarded messages should be sent. The recipient may use this DID as an enpoint as explained in Using a DID as an endpoint section of the specification.\n\nNOTE : After receiving a mediate-grant message the recipient should update his recipient_did with a keylist-update message and add DIDs. In order for the mediator to start accepting Forward Message for those DIDs.\nKeylist Update\nUsed to notify the mediator of keys in use by the recipient.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-update\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-update\",\n    \"body\": {\n        \"updates\":  [\n            {\n                \"recipient_did\": `did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH`,\n                \"action\": \"add\"\n            }\n        ]\n    },\n    \"return_route\": \"all\"\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\n\nKeylist Response\nConfirmation of requested keylist updates.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-update-response\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-update-response\",\n    \"body\": {\n        \"updated\":  [\n            {\n                \"recipient_did\": `did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH`,\n                \"action\": \"\" // \"add\" or \"remove\"\n                \"result\": \"\" // [client_error | server_error | no_change | success]\n            }\n        ]\n    }\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\nresult : one of client_error, server_error, no_change, success; describes the resulting state of the keylist update.\n\nKeylist Query\nQuery mediator for a list of keys registered for this connection.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-query\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-query\",\n    \"body\": {\n        \"paginate\": {\n            \"limit\": 30,\n            \"offset\": 0\n        }\n    },\n    \"return_route\": \"all\"\n}\n\nwhere:\n\npaginate : is optional, and if present must include limit and offset.\n\nKeylist\nResponse to key list query, containing retrieved keys.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist\",\n    \"body\": {\n        \"keys\": [\n            {\n                \"recipient_did\": `did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH`\n            }\n        ],\n        \"pagination\": {\n            \"count\": 30,\n            \"offset\": 30,\n            \"remaining\": 100\n        }\n    }\n}\n\nwhere:\n\npagination : is optional, and if present must include count, offset and remaining.\n\nL10n\nNo localization is required.\nImplementations\nRootsID DIDComm v2 Mediator\nEndnotes\nFuture Considerations\n\nShould we allow listing keys by date? You could query keys in use by date?\nWe are missing a way to check a single key (or a few keys) without doing a full list.\nMediation grant supports only one endpoint. What can be done to support multiple endpoint options i.e. http, ws, etc.\nRequiring proof of key ownership (with a signature) would prevent an edge case where a malicious party registers a key for another party at the same mediator, and before the other party.\nHow do we express terms and conditions for mediation?"},{"slug":"coordinate-mediation/3.0/","title":"Coordinate Mediation","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Production","summary":"A protocol to coordinate mediation configuration between a mediating agent and the recipient.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/coordinate-mediation/3.0","html":"Motivation\nUse of the forward message in the Routing Protocol 3.0 requires an exchange of information. The Recipient must know which endpoint and routing did(s) to share, and the Mediator needs to know which did should be routed via this relationship.\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that will be receiving forward messages on behalf of the recipient.\nrecipient : The agent for whom the forward message payload is intended.\n\nRequirements\nThe return_route extension must be supported by both agents ( recipient and mediator).\nThe common use of this protocol is for the reply messages from the mediator to be synchronous, utilizing the same connection channel for the reply. In order to have this synchronous behavior the recipient should specify return_route header to all.\nThis header must be set each time the communication channel is established: once per established websocket, and every message for an HTTP POST.\nConnectivity\nThis protocol consists of three different message requests from the recipient that should be replied by the mediator :\n\nMediate Request -> Mediate Grant or Mediate Deny\nRecipient Update -> Recipient Update Response\nRecipient Query -> Recipient\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requires the simple state of waiting for a response or to produce a response.\nBasic Walkthrough\nA recipient may discover an agent capable of routing using the Discover Features Protocol 2.0. If protocol is supported with the mediator, a recipient may send a mediate-request to initiate a routing relationship.\nFirst, the recipient sends a mediate-request message to the mediator. If the mediator is willing to route messages, it will respond with a mediate-grant message, otherwise with a mediate-deny message. The recipient will share the routing information in the grant message with other contacts.\nWhen a new DID is used by the recipient, it must be registered with the mediator to enable route identification. This is done with a recipient-update message.\nThe recipient-update and recipient-query methods are used over time to identify and remove DIDs that are no longer in use by the recipient.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\nMessage Reference\nMediate Request\nThis message serves as a request from the recipient to the mediator, asking for the permission (and routing information) to publish the endpoint as a mediator.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/mediate-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/mediate-request\",\n}\n\nMediate Deny\nThis message serves as notification of the mediator denying the recipient 's request for mediation.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/mediate-deny\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/mediate-deny\",\n}\n\nMediate Grant\nA mediate grant message is a signal from the mediator to the recipient that permission is given to distribute the included information as an inbound route.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/mediate-grant\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/mediate-grant\",\n    \"body\": \n            {\n                \"routing_did\": [\"did:peer:0z6Mkfriq1MqLBoPWecGoDLjguo1sB9brj6wT3qZ5BxkKpuP6\"]\n            }\n}\n\nwhere:\n\nrouting_did : DID of the mediator where forwarded messages should be sent. The recipient may use this DID as an enpoint as explained in Using a DID as an endpoint section of the specification.\n\nNOTE : After receiving a mediate-grant message the recipient should update his recipient_did with a recipient-update message and add DIDs. In order for the mediator to start accepting Forward Message for those DIDs.\nRecipient Update\nUsed to notify the mediator of DIDs in use by the recipient.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/recipient-update\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/recipient-update\",\n    \"body\": {\n        \"updates\": [\n            {\n                \"recipient_did\": \"did:peer:0z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n                \"action\": \"add\"\n            }\n        ]\n    },\n    \"return_route\": \"all\"\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\n\nRecipient Response\nConfirmation of requested Recipient DID updates.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/recipient-update-response\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/recipient-update-response\",\n    \"body\": {\n        \"updated\": [\n            {\n                \"recipient_did\": \"did:peer:0z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n                \"action\": \"\" // \"add\" or \"remove\"\n                \"result\": \"\" // [client_error | server_error | no_change | success]\n            }\n        ]\n    }\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\nresult : one of client_error, server_error, no_change, success; describes the resulting state of the Recipient update.\n\nRecipient Query\nQuery mediator for a list of DIDs registered for this connection.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/recipient-query\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/recipient-query\",\n    \"body\": {\n        \"paginate\": {\n            \"limit\": 30,\n            \"offset\": 0\n        }\n    }\n}\n\nwhere:\n\npaginate : is optional, and if present must include limit and offset.\n\nRecipient\nResponse to recipient query, containing retrieved recipient DIDs.\nMessage Type URI: https://didcomm.org/coordinate-mediation/3.0/recipient\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/3.0/recipient\",\n    \"body\": {\n        \"dids\": [\n            {\n                \"recipient_did\": \"did:peer:0z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\"\n            }\n        ],\n        \"pagination\": {\n            \"count\": 30,\n            \"offset\": 30,\n            \"remaining\": 100\n        }\n    }\n}\n\nwhere:\n\npagination : is optional, and if present must include count, offset and remaining.\n\nL10n\nNo localization is required.\nImplementations\nEndnotes\nFuture Considerations\n\nShould we allow listing dids by date? You could query dids in use by date?\nWe are missing a way to check a single did (or a few dids) without doing a full list.\nMediation grant supports only one endpoint. What can be done to support multiple endpoint options i.e. http, ws, etc.\nRequiring proof of did ownership (with a signature) would prevent an edge case where a malicious party registers a did for another party at the same mediator, and before the other party.\nHow do we express terms and conditions for mediation?"},{"slug":"didexchange/1.1/","title":"DIDExchange","tags":[],"license":"MIT","publisher":"TheTechmage","avatar":"https://avatars.githubusercontent.com/u/509363?v=4&s=48","version":"1.1","status":"Production","summary":"This protocol allows agents to exchange DIDs during the setup of a connection. Typically used during the use of the Out of Band protocol","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/didexchange/1.1","html":"This protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/d6d2fcf396790c117de02107a448dd64a6240801/features/0023-did-exchange\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that this protocol isn't necessary for DIDComm V2."},{"slug":"didexchange/1.0/","title":"DIDExchange","tags":[],"license":"MIT","publisher":"TheTechmage","avatar":"https://avatars.githubusercontent.com/u/509363?v=4&s=48","version":"1.0","status":"Production","summary":"This protocol allows agents to exchange DIDs during the setup of a connection. Typically used during the use of the Out of Band protocol","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/didexchange/1.0","html":"This protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/bf3d796cc33ce78ed7cde7f5422b10719a68be21/features/0023-did-exchange\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that this protocol isn't necessary for DIDComm V2."},{"slug":"data-agreement-context-decorator/1.0/","title":"Data Agreement Context Decorator","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"The `data-agreement-context decorator` describes the associated Data Agreement protocol or holds references to a signed/counter-signed Data Agreement document inline with a DIDComm message.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/data-agreement-context-decorator/1.0","html":"Data Agreement Context Decorator\nSummary\nThe data-agreement-context decorator describes the associated Data Agreement protocol or holds references to a signed/counter-signed Data Agreement document inline with a DIDComm message.\nMotivation\nA DIDComm message should be capable of carrying additional metadata about the data agreement associated with the transaction.\nTutorial\nUsage looks like this,\n{\n  \"~data-agreement-context\": {\n    \"message_type\": \"protocol or non-protocol\",\n    \"message\": {\n      \n    }\n  }\n}\n\nCore properties of a ~data-agreement-context decorator are:\n\nmessage_type - Indicates the type of message embedded in the decorator. Possible types are:\n\nprotocol - Indicates that message embedded is a Data Agreement protocol, and it must be processed accordingly\nnon-protocol - Indicates that message references a data agreement offer.\n\nmessage - Hold the message body.\n\n~data-agreement-context decorator could carry a Data Agreement protocol message inside it or a reference to the data agreement offer.\nWhen it carries a reference to a data agreement instance (or receipt), it is understood that the outlying DIDComm message is occurring in reference to a data agreement that was signed by both requester (Data Source or Data Using Service) and the responder (Data Subject).\nThe context decorator could also carry a Data Agreement protocol message; for example, If Data Source wants to send Data Agreement Offer to a Data Subject when offering a credential preview, it could do so by embedding https://didcomm.org/data-agreement-negotiation/1.0/offer DIDComm message. The Data Subject can respond while requesting a presentation by embedding the response https://didcomm.org/data-agreement-negotiation/1.0/accept DIDComm message in the decorator.\nExamples of ~data-agreement-context decorator used in DIDComm messages\nAries RFC 0036 Issue Credential protocol enhanced with Data Agreement Context Decorator\nissue-credential/1.0/offer-credential\n{\n  \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/offer-credential\",\n  \"@id\": \"29e24a0d-c9e8-4e5a-b913-6c821dfb9e25\",\n  \"~thread\": {},\n  \"~data-agreement-context\": {\n    \"message_type\": \"protocol\",\n    \"message\": {\n      \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/data-agreement-negotiation/1.0/offer\",\n      \"@id\": \"066aaf33-27f2-40b6-95ce-ec6ff261f693\",\n      \"to\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n      \"body\": {\n        \"@context\": [\n          \"https://raw.githubusercontent.com/decentralised-dataexchange/automated-data-agreements/main/interface-specs/data-agreement-schema/v1/data-agreement-schema-context.jsonld\",\n          \"https://w3id.org/security/v2\"\n        ],\n        \"id\": \"5d028f08-285b-4872-94c3-f309ad4b5a24\",\n        \"version\": 1,\n        \"template_id\": \"6f5c0c86-40cb-4683-a993-e8ba8cbbdaa9\",\n        \"template_version\": 1,\n        \"data_controller_name\": \"Happy Shopping AB\",\n        \"data_controller_url\": \"https://www.happyshopping.com\",\n        \"purpose\": \"Customer loyalty program\",\n        \"purpose_description\": \"Issuing loyalty cards for customers.\",\n        \"lawful_basis\": \"consent\",\n        \"method_of_use\": \"data-source\",\n        \"data_policy\": {\n          \"data_retention_period\": 365,\n          \"policy_URL\": \"https://clarifyhealth.com/privacy-policy/\",\n          \"jurisdiction\": \"Sweden\",\n          \"industry_sector\": \"Healthcare\",\n          \"geographic_restriction\": \"Europe\",\n          \"storage_location\": \"Europe\"\n        },\n        \"personal_data\": [\n          {\n            \"attribute_id\": \"be99f24e-a7fe-452b-aac5-cd564f4700b6\",\n            \"attribute_name\": \"Name\",\n            \"attribute_sensitive\": true,\n            \"attribute_category\": \"Personal\",\n            \"attribute_description\": \"Name of the user\"\n          }\n        ],\n        \"dpia\": {\n          \"dpia_date\": \"2021-12-12T10:19:46.259870+00:00\",\n          \"dpia_summary_url\": \"https://org.com/dpia_results.html\"\n        },\n        \"event\": [\n          {\n            \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n            \"time_stamp\": \"2021-12-13T06:47:50.755274+00:00\",\n            \"did\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n            \"state\": \"offer\"\n          }\n        ],\n        \"proof\": {\n          \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n          \"type\": \"Ed25519Signature2018\",\n          \"created\": \"2021-12-13T06:47:50.757521+00:00\",\n          \"verificationMethod\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n          \"proofPurpose\": \"contractAgreement\",\n          \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..toOtCZKCjc-Mms76jJGKLVTier6CnbMDxuYw3KFgQKpPu-AO4xBmXL7vgAjhNYZ9VhKwakn_BWYigWHDtpLIBA\"\n        },\n        \"data_subject_did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\"\n      },\n      \"from\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n      \"created_time\": \"1639358283\"\n    }\n  },\n  \"comment\": \"string\",\n  \"offers~attach\": [\n    {\n      \"@id\": \"libindy-cred-offer-0\",\n      \"mime-type\": \"application/json\",\n      \"data\": {\n        \"base64\": \"eyJzY2hlbWFfaWQiOiAiQ2JERHN5QXBDNHpKb3V0dU5uVGlCWToyOkN1c3RvbWVyIGxveWFsdHkgcHJvZ3JhbToxLjAuMCIsICJjcmVkX2RlZl9pZCI6ICJDYkREc3lBcEM0ekpvdXR1Tm5UaUJZOjM6Q0w6ODE0OmRlZmF1bHQiLCAia2V5X2NvcnJlY3RuZXNzX3Byb29mIjogeyJjIjogIjE5MDI1NzExNjkwNzY4MjMyMDc0NjE5MzE5NjM0ODc2NjI3NDQxOTA3MjI4ODU1NTU3MzQyNzUyMjgyMjY0MzY2MzgzMDgzOTgzNjgiLCAieHpfY2FwIjogIjg0MzYwNzk3MTQ3NzU5ODcyNzQwNjk0NjcxNDQ4MzUwODcwMDExODA0OTU5OTgwNjgzMDI0OTUyMDkzNTU2OTA5MDUyODIwNTgzNjMyMDA4MDg4MjAyMDIwMDgxNzY5MTQ5MzA4MTYyMzEyMzgyNTc0OTU2MzQyMDMxODgyNjY0MTk2MzEwMjgzNzY3NDI3Mzk0NjgwODIyOTEwMzM3MTg5MjYxNDkyNjQzOTYzOTkxMTg1NzI0NzI5MjM4ODE1NjIzNjE0MjI1MTQyNTYwMjYwMDE3NjMyODY5MTc5MzE1NDEwNjI4MDYzNTQyMTk1NjY3OTc1NjIxMTI0NjkwMzE0MjAzNDEyNzU2OTk0ODYxMDQyOTA1MDQ2OTQ2NjE3OTA0MDA2NDY0MTI2NzY4NDM2ODUwMTMyNDQwNzU5Njk2MDkwMTY1MjA3NjM2OTYxMzk0MDE4MjcwMjA3NDU4MjgxNzk4ODIxMTYyNzgxNzUzMjYwNTcwODc1MjUzODc5NzUyNjYyNzIyMjQ4ODU3MTY0Mzk2MDM3Njk0MzA3ODIwMTU3NzM0NDQ2Mjk0NTQ1NzE5OTUwMTg1MjU2Njc2Njk4NDEyMTg1MzQ1NjU1MzQzMjYxMTI5NTQ0OTM1NTA4NjkyMDE2NjI3MDg0MjI0NDk2MTAzODc3MjYyMjU0NzU2ODU4MDc4NDY1NjAyNDQ3NzMyOTc0OTgzNjIwODgyNzgzMjQyMjk0MjAwOTczODMwNjA2Njg4OTg1Njk4MTQyODk4MTg3MDE2MTM3Nzc3Mjc0MjEzODI4MDE3Mzg2MjY0MzE3MDY1NjcxNjAzNjY2MDk3MTAwMjEwMTk1OTg3MTc0MDU4Njc2NDEzNTEyODY4MDY0NzgxMDEwNjg0OTAzOTg0MTIzNjU0MjUwNTEzMTUyODYiLCAieHJfY2FwIjogW1sibmFtZSIsICIxNzYyMzA4MjEwNzM2MDk1NDQ3MDM3NzgyODIwNjU4Mjc5NDcyNzU4OTU4NDQyNjQwNzQzMDg5NDI5NDc1NzEyMDYwMTg2NDQxMTMyMTAzNzkwMTI5NTg3NzM5NTExODc1Nzk0MDA0NDQwNTEzODA2NDMyNzQzMDI0MTQ1MjUyMTM2MDMzODM4MzA2NTQwMjA4OTkxODc5NDI5NTAxNDg2MzM3NDA5NjM2MzUwNjA5ODIwMjk0MDM2NTYxNTc5MTI5NDg3Mzg1NjYwNjcwMDMzOTgxODQyMDQzNDkyNzk4MDM4NjIyOTI1NDMxODg2NjY1OTE3MTQzOTMwNzIwMTE0MjUxNDk0NzAzODg0NTYzNDg4MDg2MjYwMDE4NDc5MTU2NTc5MDIxNjUwNTk4ODUwODM3OTA0MzkyNjU2MjY0NTA1Njc0NjE1OTU4MjI3MTY1MzQ4NTQ2OTk1Mzc4MTc3NDMxMzQ1NzQ0NjMxOTM3MTY4NDg3MjA4NDI3MTQ0ODE5OTEwODIyMzI2NzUyMzYyMzI5NjgzNTc2ODU0MjkxOTYyODcyOTYzODIwOTI4Mzc5NzkyNjUxMzEwMTEwODQwMTYxOTU1ODQ0NDM4MTM1MTUwNjI2NzcxNDc0MzIwNzYzNjI2MTQyMDEzNTAyMjQ1NDY5MTE0OTc1MjE2OTAwNDczMzc3NjcwOTk4Nzc2NTA3MDk0NjkzMjM3MTM3MDk1Mjk4MTIyODQ3MjE4MDc3MzQ4Njk0NjM0MjQ4NDMyNDA1MjExMjc1NTk0OTI0MTE1NDczMTI1MDgwMTk2Mzc3Nzg0MTA2MzAwNjgzMzA2NDA5MjkyNjkxNjM1NTM3NDI2NjQ4ODAyOTE2NzgxOTk0Njk3MDgxMjIyNTIxNTkxMzY1MTMzMjQ3OTc1Njc2MTkyOTI0Il0sIFsibWFzdGVyX3NlY3JldCIsICI2MTU0OTQwOTg5MzA2NDI5ODU0MTUxMTYxOTA4Njg2MTM4MzIzNzM3NTg4MjMxNTc5NTM5NTIxMTc5Nzc2NTEwNjUxOTA1MjU3ODczOTUyNDcyOTE1NTExMjYzODk2NzE2NDA3NDIyMzY1MTI2MjEwNTk0MjY1MTQ2NjU3NTgzMzQ3MjkxNjAwMDYwODE4ODI3NDExNDg4NTMxMjY4MzM1MTYyNzY3OTUxNzIzODkyODkwOTg1NjU4MjQwNDAzMzc5NTY1NDY4NzA5MTYyOTUwNzE0NDU5MjYxNjI1NzA1NDI5OTM0NzcyODQ2MTYxMDM5NjIyNzI0MDM1Njk0Mzc2MjQyNjkxNzI2OTA5NTk2ODMwMTE1NDE4NzE4Mzk0ODIyNDc5MDY3MzY0MzYzMTE0NDQwNTA3NjU4MjQ3ODk4NDg0MzQ5ODg4NDMwNjg2MTEzMDg3NTE4NDE0OTkxMzc4MDg3MjA1NzU2ODIyODg2MDA4Njg2NzM1MTgxNzU5NjIxMzQ5Mjc3Mzg5NDYzNzI5OTIzMzUxODgxNDc5ODkxOTE0NDA2NjU3OTExMDI5ODgxMTExODc2NTgyMTQ0MDkyMTk1Mzg2NTY0NTI4NDQ4ODg4OTY3MDAwOTIyMTgyNDkyNjA0OTM2MzcwMTU3MDI5MzUyMDM3ODg1Mzc5Mzk1MjUxNDcxMzc4NTEzNTYxOTMzMTg1MDY5OTY3ODgzMjI2OTA4NjA5OTEwNDE4MzA0OTg1MDEyNjIwMTEwNzU4NjU3OTAzODU0ODc2NTMyMjg1NDg5NjY2MDkzMTAyMjQ1NTg1NjUzNTg1NzU2MzUwOTE4MDgzMTYwODEzNTc1NjczMTAzMDE5MDQ3NDg1MTQzMjg4NjQzMDE3ODEwMTEwMDQwODA0NTU5NDcwNDUxNjI4MTg5Il1dfSwgIm5vbmNlIjogIjEwODA3ODMzNzg3NjQxMzg1NjgxNjg4MDMifQ==\"\n      }\n    }\n  ],\n  \"credential_preview\": {\n    \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview\",\n    \"attributes\": [\n      {\n        \"name\": \"Name\",\n        \"value\": \"John Doe\"\n      }\n    ]\n  }\n}\n\nissue-credential/1.0/request-credential\n{\n  \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/request-credential\",\n  \"@id\": \"9f60db9f-b83f-4990-a06b-c64643388f9a\",\n  \"~thread\": {\n    \"thid\": \"29e24a0d-c9e8-4e5a-b913-6c821dfb9e25\"\n  },\n  \"~data-agreement-context\": {\n    \"message_type\": \"protocol\",\n    \"message\": {\n      \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/data-agreement-negotiation/1.0/accept\",\n      \"@id\": \"0f9034db-3e58-498b-8119-59fa37f3e652\",\n      \"body\": {\n        \"id\": \"5d028f08-285b-4872-94c3-f309ad4b5a24\",\n        \"event\": {\n          \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n          \"time_stamp\": \"2021-12-13T06:50:07.180078+00:00\",\n          \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n          \"state\": \"accept\"\n        },\n        \"proof\": {\n          \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n          \"type\": \"Ed25519Signature2018\",\n          \"created\": \"2021-12-13T06:50:07.180946+00:00\",\n          \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n          \"proofPurpose\": \"contractAgreement\",\n          \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..CvX_kzNTK9vBTb2J4p2cLsImgy1tPOi2_psmgxSipllR_iRxY8bf9kGyhEqy4Q7n7KAGFnd5oPKmgFhXKplDAQ\"\n        }\n      },\n      \"from\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n      \"created_time\": \"1639358418\",\n      \"to\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\"\n    }\n  },\n  \"requests~attach\": [\n    {\n      \"@id\": \"libindy-cred-request-0\",\n      \"mime-type\": \"application/json\",\n      \"data\": {\n        \"base64\": \"eyJwcm92ZXJfZGlkIjogIjc3SGR2ZWM1WHhYb2NSSENybmVSUksiLCAiY3JlZF9kZWZfaWQiOiAiQ2JERHN5QXBDNHpKb3V0dU5uVGlCWTozOkNMOjgxNDpkZWZhdWx0IiwgImJsaW5kZWRfbXMiOiB7InUiOiAiNjg5MjExNTc0NDk5MTgxOTg5Nzk3NjExNDE5ODUyODIxNDEzNTQ3NzgyNzAwNTkzMDg3NTQ4MDM0NjY5NjEyMTY0Njc1NDExNjE0NzkzMDE0NTA3ODgyMzY5NzA2Njk5MDY2NTA1NzE5NDkwMTE3ODgzNjc2MjI4NTM3OTEwNjU1MjgwODgzMjkwNTg4NjcyNjk4MDYwNjAzODU3MTMyMjMyNDMzNTk5MjI5MTg3MzI1NjA3MjAxNjE0MTc2OTE4MTI3OTI3MTAxMjMzMjU1NDMxNDkwMTM3NzU3NDM0ODE1MjczNzY1NTY0NTQ1OTMxNTIyODU0MDQwMTI0NjI0Mzk3NjM0MjIzOTc5MDEzMDcxNDI2NDk0OTMyNzQxMjgzNzEzMjY5NDQxNDg3ODM3NDM0MjY4NDM5MTg1NDYyMTUzMTk4MjUyMjEyODU4NDkwNDY3MjMyMDUwODA2ODkwNzA1OTQ5ODY0Mzg5MjM2NjgwNTExOTE4NjI0ODc1OTE2NDA3MDM2MDgxOTYzMjUyODIwNDQ5MjQzNTgxODQyOTQ0NTkyNTQ1NjM5NjAxNDY2Mzk0MDk2NjA4NTk5MTQ4NjEwMzUxMTk1MTQxODY3OTExMjgxMTE1MDE3NDU2NzMwMjQzMzczMzY0ODY4NzM1Mzk0MTExOTMwMTE1NzU0MTE5MTI4MDAxMjEyMTc0NjY4MzI2OTgyOTk3OTI3MDI1MDczNTU2OTk5NjM5OTY2NTAyMTg1NjM2MDEwMDU2ODQzMjE2NzY0NTk4MjkxMzM5MjY0MzMzNjA5NTg5OTk1NDA3MzkyMTMzNDciLCAidXIiOiBudWxsLCAiaGlkZGVuX2F0dHJpYnV0ZXMiOiBbIm1hc3Rlcl9zZWNyZXQiXSwgImNvbW1pdHRlZF9hdHRyaWJ1dGVzIjoge319LCAiYmxpbmRlZF9tc19jb3JyZWN0bmVzc19wcm9vZiI6IHsiYyI6ICI4MzQ2MjUwMTQ4MzAzNDgyMDk5MzI3MDA2ODUwNzc3NTc3OTU5NjYyMzYzNzgyMTcxMDc2Mzc1OTMyMzEzMzQ1NDQwMDc1OTMzMDMwMyIsICJ2X2Rhc2hfY2FwIjogIjIxNzY3NDMyODE0Njk3OTk4MTg4MDAwOTg4MTYzNjUxMzY4ODc2NTMwNDM5MDk4NTA5NTQxNzMwNTUwOTUyMDY4MDcyODA0MTA2OTI5Mjc0ODgwNzM1NTkxNTkxNDQxNDA2ODM4NDk5MzkwNzE1NTM5OTU5MDYxMjA3NDgxMDc3Mzg5MjUxOTk5MjQzODcwODI4MTk0NTgzNTg4NjkyMDcyNTg2MTQxNzIyMTEwNzI2MTIyMTIwNDg0NDg1NTc0MzIwNTQxMzU2NDAxMzUyNzg3NzQyNTA1ODYxNjUwMjMxNzAyODY5MjI4Mjc2Mzg2NTI1MTY3NjQyMTE4MjY1MTcyNTYyMTI2ODkzMzY0MjA5OTYzNTk2ODkxMDY3MDA0OTIwMjA5NTM3MTQzNzQ2ODcxNDI4NDcxMTY5ODY2NDM3NjM1MzI4NDg5MTM1OTY5ODMwNjQ5MzI1ODYwNTk1OTU3MzkyMzc0Nzg2NTE2MjI4NDI5ODk2NDQ2Njk5MTUxNTYwNzU4ODc4MTg5NjI1MTU3NTQxMTc3OTc3OTc4NTM4OTU3NzA3MDkxNjk1NzMzMDYzODUwOTg0OTgzMzkxNDEzMDE2NTQ5OTM3NTU0OTk1ODIxMDU4NDU2MjU3NzgwNzg1NzIxMTQzOTM3NzA3NzQ4MDc0MDc1NTA4Mjg2MTgwMTIzMjc0MTk0ODU5NjQ3OTE1ODM5NTAzNTQyNDI2MzE5NjgyOTc2NzY5NTUyODEyNjk4MzIxOTMyNDgwNzg0MDAzNTY5NzA2NDc1MTk4NTI4ODQ4NzAwMDI5MTgzOTE0NTAzNzU2MzkwNjQzNTY1NzM1MzgyNjU3MjI0OTA5ODg4MjcwMTY4NzUwNDMzODU2NTU3Mzk2NDk2NTU4ODg5MjAyODk0OTcwNTQxMzY5NjY2NTgwMzI5MTMyODQ4OTIxOTM5NzgzNDYzMzEwOTAiLCAibV9jYXBzIjogeyJtYXN0ZXJfc2VjcmV0IjogIjE0OTI1OTM3NjE2MDgxNTgzOTU4NTY5MTQ5ODg3MTExNzU3NjIzOTczMzY1MTExMTM5ODczNTIxMjIxMjczNDI3OTYxNjcyMjM2NDk4MDM0MTI5NTY0NzYzNDEzOTkwNjE4NTc2NjU2OTgyMjMwODQ5MDIzODcwNTY2ODU2NDM3MjIwNzgyMTAyMzMyMTcyNDE3MDA0MDY0Mzc1MjQ5NjI3ODIxMzE2OTkxNzI5MDU4MjYxIn0sICJyX2NhcHMiOiB7fX0sICJub25jZSI6ICIzNzEyMjExNDg2NzQ5MjI4NDMyNzk0NjAifQ==\"\n      }\n    }\n  ]\n}\n\nAries RFC 0037 Present Proof protocol enhanced with Data Agreement Context Decorator\npresent-proof/1.0/request-presentation\n{\n  \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/request-presentation\",\n  \"@id\": \"dc99cca5-ea76-4b20-ab74-fe59e422ece1\",\n  \"~data-agreement-context\": {\n    \"message_type\": \"protocol\",\n    \"message\": {\n      \"type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/data-agreement-negotiation/1.0/offer\",\n      \"id\": \"12bcc96d-88b6-4ee8-997a-4ce67b653d87\",\n      \"to\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n      \"body\": {\n        \"@context\": [\n          \"https://raw.githubusercontent.com/decentralised-dataexchange/automated-data-agreements/main/interface-specs/data-agreement-schema/v1/data-agreement-schema-context.jsonld\",\n          \"https://w3id.org/security/v2\"\n        ],\n        \"id\": \"d73043e6-4627-4e2f-a20a-2495604afd84\",\n        \"version\": 1,\n        \"template_id\": \"b59b56ad-6cba-46f5-a86b-e578a1e503ed\",\n        \"template_version\": 1,\n        \"data_controller_name\": \"Happy Shopping AB\",\n        \"data_controller_url\": \"https://www.happyshopping.com\",\n        \"purpose\": \"Customized shopping experience\",\n        \"purpose_description\": \"Collecting user data for offering custom tailored shopping experience\",\n        \"lawful_basis\": \"consent\",\n        \"method_of_use\": \"data-using-service\",\n        \"data_policy\": {\n          \"data_retention_period\": 365,\n          \"policy_URL\": \"https://clarifyhealth.com/privacy-policy/\",\n          \"jurisdiction\": \"Sweden\",\n          \"industry_sector\": \"Healthcare\",\n          \"geographic_restriction\": \"Europe\",\n          \"storage_location\": \"Europe\"\n        },\n        \"personal_data\": [\n          {\n            \"attribute_id\": \"be99f24e-a7fe-452b-aac5-cd564f4700b6\",\n            \"attribute_name\": \"Name\",\n            \"attribute_sensitive\": true,\n            \"attribute_category\": \"Personal\",\n            \"attribute_description\": \"Name of the user\"\n          }\n        ],\n        \"dpia\": {\n          \"dpia_date\": \"2021-12-12T10:19:46.259870+00:00\",\n          \"dpia_summary_url\": \"https://org.com/dpia_results.html\"\n        },\n        \"event\": [\n          {\n            \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n            \"time_stamp\": \"2021-12-13T06:53:39.091120+00:00\",\n            \"did\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n            \"state\": \"offer\"\n          }\n        ],\n        \"proof\": {\n          \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n          \"type\": \"Ed25519Signature2018\",\n          \"created\": \"2021-12-13T06:53:39.094215+00:00\",\n          \"verificationMethod\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n          \"proofPurpose\": \"contractAgreement\",\n          \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..fmULdKkKpNi2haL7KtcZWOUkYnhtYkhlwGo3qa29lCMW7lKOaJM3iKY5SSDqPzPg7fQR_Yk4W1quj0M-TEbyDA\"\n        },\n        \"data_subject_did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\"\n      },\n      \"from\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n      \"created_time\": \"1639358631\"\n    }\n  },\n  \"comment\": \"Collecting user data for offering custom tailored shopping experience\",\n  \"request_presentations~attach\": [\n    {\n      \"@id\": \"libindy-request-presentation-0\",\n      \"mime-type\": \"application/json\",\n      \"data\": {\n        \"base64\": \"eyJuYW1lIjogIkN1c3RvbWl6ZWQgc2hvcHBpbmcgZXhwZXJpZW5jZSIsICJ2ZXJzaW9uIjogIjEuMC4wIiwgInJlcXVlc3RlZF9hdHRyaWJ1dGVzIjogeyJhZGRpdGlvbmFsUHJvcDEiOiB7Im5hbWUiOiAiTmFtZSIsICJyZXN0cmljdGlvbnMiOiBbXX19LCAicmVxdWVzdGVkX3ByZWRpY2F0ZXMiOiB7fSwgIm5vbmNlIjogIjQ2NjUwMTE1MTUxNzI1ODM4OTM4NjI5MyJ9\"\n      }\n    }\n  ]\n}\n\npresent-proof/1.0/presentation\n{\n  \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation\",\n  \"@id\": \"3f62acb2-722c-4c3f-b361-0ec32a39bede\",\n  \"~thread\": {\n    \"thid\": \"dc99cca5-ea76-4b20-ab74-fe59e422ece1\"\n  },\n  \"~data-agreement-context\": {\n    \"message_type\": \"protocol\",\n    \"message\": {\n      \"type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/data-agreement-negotiation/1.0/accept\",\n      \"id\": \"4937ed2a-c2e2-4ebf-802f-9c9a4d7cca07\",\n      \"body\": {\n        \"id\": \"d73043e6-4627-4e2f-a20a-2495604afd84\",\n        \"event\": {\n          \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n          \"time_stamp\": \"2021-12-13T06:56:46.082679+00:00\",\n          \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n          \"state\": \"accept\"\n        },\n        \"proof\": {\n          \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n          \"type\": \"Ed25519Signature2018\",\n          \"created\": \"2021-12-13T06:56:46.083893+00:00\",\n          \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n          \"proofPurpose\": \"contractAgreement\",\n          \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..5LMj7UN9lE3snlxHuG3y7BnxZ1HZhYnq3hNTVDUEQjFa0pguag0eI5BV_7mu01RAbCwcK_5_e6qE2mH-OKzGDQ\"\n        }\n      },\n      \"from\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n      \"created_time\": \"1639358817\",\n      \"to\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\"\n    }\n  },\n  \"presentations~attach\": [\n    {\n      \"@id\": \"libindy-presentation-0\",\n      \"mime-type\": \"application/json\",\n      \"data\": {\n        \"base64\": \"eyJwcm9vZiI6IHsicHJvb2ZzIjogW3sicHJpbWFyeV9wcm9vZiI6IHsiZXFfcHJvb2YiOiB7InJldmVhbGVkX2F0dHJzIjogeyJuYW1lIjogIjQ5MjYzODM1NTY4NzkwODUyMjg1MTM2NzU1NTQwNTAxMTAxMDQ0OTUyNjI5MDQxMTcwMTAyNzcyNTc5OTYzNzI0NzE0ODI3MzE1NDY0In0sICJhX3ByaW1lIjogIjQyMTQzODMwNzc5NjcyMzI3MDI1ODAxNzA2MDcyNzU5ODQ5MzEzMDIxOTQ0Mjc3Mjc2NTA2MDg0Nzc1MTE2MTg0NjcwMzI4MTI2MTk4NDczMzU4NDM2NjY3MTI1ODExMTU0MzYxNDQ5NDkyMTU1ODk5NzY3MDA2NDU5Mzk2NTM5ODY2MTk1ODE1ODM2ODIxMTAzOTcwOTU3NTEyOTkxMzQwMzYzNzkxNDYwMDk1NzY0OTkxNTQzODMyNjIwOTAzMzYzMjc2NjU4NjMwNTE3ODgzNTE5NzMwNzQ1NTY4NTE4MzAzOTgwNzY4NjI5NTAwNzM0MzQ4NjU0OTE4NzU3OTEzNTA1OTQ1MTIyMjkwMTI2NTMyNTM1MDY4NTE4NzAzMDU3NTkzOTA5MTQ2OTMyNTYxNzgxNTA3NzUzNTE3NjYxMDQzNTU0MTMyMTI4OTQwODk5NjcxNDMzNzQ3NzQyMjkxMjI2NTIxOTM0NTg3NTkwOTMzMTgzNzQ4OTI0Njk5NzUxOTc5ODI1OTY1ODIzMzg0NjczNDY1MDAxMDYxMzYyODQ4OTAwMDU3NTIyNTA2OTU4ODY4MjM0NDUyNjUyMTgzMzU3NjY1NzczNDg2NDI3NDc0MjE0NjgyMjQzNjY2MTUzOTk0NjI5NDkwNzAzMDA4MDMwODAyMTUxNTYxNjc5ODk0MjI1NTkxMTcyNzQ1NzEzODQ0NTQzOTMyMzE4ODM2NzIwNjc2MjUyNDY0MTIzMDk5MjUzODE0NDIxMTY4NTU2OTI1MjMxNDM4MzAwNjE5ODcxOTY5ODM1NjI5NzA4MjAzMTY3MjExIiwgImUiOiAiNTI0Njc1NTY4MTI2NjMyMTk1NzkzMzUwMTM5NjcxNzMwNjgyMTExMjMzNjU0NDgwMDM2Nzc5NzEwMjg5ODgyMDA2MTE4NjQ5MzM1MTk1NDU0Nzc4MDEzODM5OTk4ODkyNzE2NDY0NTI3NjgwNDg0MDI3Nzg2OTk1NTA4ODg4NTI2MzY0MzMzOTciLCAidiI6ICI0ODA1NjMzOTA3MzgwNjI5NjMwNzQxODgxNzgzODY2ODY3NDQ0NTMxODIyMjY5NjEzNjcxOTcxNTc0NTUxMzA1OTk5NzUxMjc1NzI2MTMyNzkzMzQwNzA4MDAyOTY3NTQwNTUyODMxMTAwNzIxNTQzMDQzMzg1MzI2MjExMjIyNzkxOTM3NDIzNzU5NDcyNjE1NDQ3MzAzODY2MzI3MDIzMDA3ODAyMzY5NzU5MDA2MTM5MDk0MTA4OTIyNDg3OTc0Mzk4Mjk3NzM1MzQ1Nzg5NTQ0ODEzMDc2ODg1MjUxMjYwNTE3NTkxNTk1NTAwMDM1NTMzMzI2Mjg3MzQ5NzA0MTA2MjA5OTE5NDMxNTM4NjI3OTI5MTU2MzkxNDk4NTgzMDc0MTYyMjA2NTM5NjUwNzE0NjI1MzI2NzI0NTUzMjY0MTkxNDg5MjI3NDUxNjMxNzY2NTg1MTMyNzgyMTU5MzMxNTYwODcyODE1MzMzMDY4NDAyOTczMjg0NzIwMTAyMTA3MjExMDYzMTYxOTEyMjgwMTY3Mjg0MDA5ODI3NTY1MjYyNjI2MTMwNjU4MTU0MjU1MDM4MzY5NzA3OTUwNzQzNzM5ODI4NTM4NDAzNzg1NTc2NzUzMDMxNzQ2MzU1NjEzMzkxNzE5ODU1MTY0MDUwOTI4MDgyNjExNDQ4NjU2NDk2MTc3NTg3NzExNjg1MDU4Mzg4NjkzMTMxNTYzMTIzMDk4Mjk0NzAxODU1NzQ4MDAyNzEzMzg0NTk0MjM4MzU1MzExODI3Mzg5NzI1MzE4NDE0ODIwNTQwMjI5NzE5NzA5ODE3NTA0MDYwOTg3MDU2Mzk0MjM3MTg5NTE0ODk0NzY1MDQ0NTc2NjIzMjQ3NjAxNjQwNTU0NzMyNzM4Njk2Mjk5MDY5MTI4NjI5NDc1MjQ2NjkxNzI2NDkwNzAwNzM1MjAzOTU5MjQxMjc3ODk3NjY3MTE0MDI2NjQxMjQwMTE0MzE1MDE0NzkxMzk0MzQwMDIzODIyNjgwNDEwMDMyMzI5MjEyMzA0NDY2NjU3MDg2NzgyOTEzNDQ5Njc5NjE4NjI3MDc1NTc4MDMxNDg1MjczMjE1Mjc0MDU4MDYzNjkxNjk1MzYzNTcwODU3MjQxNTI0MTczNDM2MzUwNzkxMjU3MjIxNzM5MTEwMDM0NzA4NDUzNTY5MjI5MzU4MDgwNTEzNjg1Mjk3NDMwMDk0NTM3MjQiLCAibSI6IHsibWFzdGVyX3NlY3JldCI6ICIxNDAxODQ3MDA4Nzg4NTA5MDMwOTIzMjYzMjgxNzg3NjQ3ODQzMzQxMDA3NjM5MzQxNDI5MTMyMTcwMDMwNTExNDUxMDA3NjcwMjI5NDY4OTg4OTc3OTEzNjI1NTAzMDE5NjE3NDUyNDQwOTg0OTc2NjM2MTc1NDI3MzE0MTE5NTU4NzA4OTkxNzgyODExMTYzODk1NTQ1ODY3ODkzOTc4MjM0MjAxMjcwNjAwOTE2NjQzNyJ9LCAibTIiOiAiOTA5MDcyMTc4NjA4MzQ5MjY2ODYzNDk2NDM1OTExMjY1OTM4NjAwOTExNzI4MzI1MTI5NDk3OTc2NDE0MzQzNzMzNDY3Nzc1MTgwNjE1MjYyNDIyMzg2ODMyNTQyNzcyOTc0OTI1OTU5NTk0ODcyODE5NzQwMDIxMTQxMDg2ODk2MjEwMTU4NjkxNzc0MzE1NjY3OTcyNTk5ODY5NDU5ODE2NTYyMTQ1Njc2MDk0ODQzNCJ9LCAiZ2VfcHJvb2ZzIjogW119LCAibm9uX3Jldm9jX3Byb29mIjogbnVsbH1dLCAiYWdncmVnYXRlZF9wcm9vZiI6IHsiY19oYXNoIjogIjkxNjM1ODgwMzU2MjI5ODA5MDc2NTA4MjQ1NDcxNjM3NDc1NDc2MTQ3NDc0NzYwNDgzMTI5MzAwNDcxNjEyOTUwMjI5MjE4MzQzOTc5IiwgImNfbGlzdCI6IFtbMSwgNzcsIDIxNSwgMjM2LCAyNCwgMTUsIDU5LCA3OSwgOTIsIDIyMywgMTk1LCAxMzEsIDE3LCAxMDYsIDgsIDE3NywgMTAsIDkwLCAxMzAsIDEwMSwgNSwgMTY4LCAyNDMsIDIxLCAxOTAsIDE3MywgMTg1LCA4LCAxNjUsIDIwMCwgMjE5LCAxNjYsIDM1LCA1NywgMTAzLCA4MSwgMTcxLCA3LCAxMywgMTQ5LCAyMzYsIDE1LCA5NywgMjI5LCAyNTQsIDE3MCwgMTkxLCAyLCAxMDcsIDgsIDIxOCwgMjI2LCA4MywgOSwgOSwgODksIDIwMCwgNjAsIDI1NCwgMjIwLCAxMDksIDE3OCwgNTQsIDExNCwgMTc4LCA1NiwgNTksIDE2OSwgMTkxLCA2MiwgMTM3LCAxMDgsIDE5OSwgMjIwLCAxMTIsIDIwOSwgOTksIDE3NCwgNDMsIDI5LCA1NCwgMTksIDEzOSwgNjgsIDMwLCAxNjAsIDIyOSwgMTg4LCAyMzYsIDUzLCAyNiwgODYsIDcxLCAxNDEsIDE4MCwgODgsIDE3OCwgMTAyLCA0MSwgMTIzLCAxMzcsIDQ1LCAyMjksIDExNSwgNTksIDE2MiwgNDcsIDM3LCAxODgsIDg2LCAxMDcsIDIzMiwgMTQyLCAxNzMsIDE5LCAxOSwgMjAyLCAyMjUsIDEwOCwgMTg3LCAwLCA4NywgMjI0LCAxNywgMjM0LCAxODYsIDcwLCAyMDMsIDQxLCAyMDIsIDE3NywgNTksIDI0MSwgMjE4LCAxNDQsIDgyLCAyMTIsIDE2LCAyNDgsIDE4NiwgMjQ5LCAxMDYsIDI3LCAxNjAsIDE0NCwgMjM3LCA1MiwgMjIsIDEsIDIyNiwgNDEsIDE5OCwgMjQzLCA5OSwgMywgMjQsIDE3MCwgNzksIDcsIDIzOCwgMjA4LCAxNTEsIDExMCwgMjQ2LCAxMzAsIDEwMywgMTY2LCA2NCwgMTU3LCAxNCwgMTE2LCA2OSwgMjQzLCAxMjAsIDgwLCAxODgsIDIzMSwgMTQ3LCAxNTgsIDYyLCAxLCAxMywgOCwgNzUsIDIyLCAxNzAsIDIxNiwgMTY2LCAxNiwgMTk2LCA3MCwgNDIsIDE0NiwgMTY5LCAyMDEsIDIyOSwgMTU0LCA4MSwgMTU3LCA4NywgMTYzLCAyNywgMTYzLCA0NywgMjEzLCAyMDQsIDI1NCwgNTgsIDkzLCAxNTEsIDQ2LCAxOTMsIDIzOSwgMTE2LCAyMDYsIDEyOSwgNjQsIDIwMiwgMiwgMTU5LCAxNzMsIDE0MiwgMTAyLCAxMTcsIDEyMSwgMTIwLCAxNzcsIDQwLCA3LCAxNTcsIDI0NywgMjA4LCAxMzEsIDE4NCwgMjM2LCAxMzUsIDIyNSwgMjI4LCAyNTQsIDE1LCAxMDksIDgxLCAxNjUsIDEzNCwgMjM5LCAxNTMsIDY1LCA5MiwgMTQ1LCAzMSwgNjAsIDIyOCwgMTU1LCAxMzYsIDI2LCAxNDEsIDIzNV1dfX0sICJyZXF1ZXN0ZWRfcHJvb2YiOiB7InJldmVhbGVkX2F0dHJzIjogeyJhZGRpdGlvbmFsUHJvcDEiOiB7InN1Yl9wcm9vZl9pbmRleCI6IDAsICJyYXciOiAiSm9obiBEb2UiLCAiZW5jb2RlZCI6ICI0OTI2MzgzNTU2ODc5MDg1MjI4NTEzNjc1NTU0MDUwMTEwMTA0NDk1MjYyOTA0MTE3MDEwMjc3MjU3OTk2MzcyNDcxNDgyNzMxNTQ2NCJ9fSwgInNlbGZfYXR0ZXN0ZWRfYXR0cnMiOiB7fSwgInVucmV2ZWFsZWRfYXR0cnMiOiB7fSwgInByZWRpY2F0ZXMiOiB7fX0sICJpZGVudGlmaWVycyI6IFt7InNjaGVtYV9pZCI6ICJDYkREc3lBcEM0ekpvdXR1Tm5UaUJZOjI6Q3VzdG9tZXIgbG95YWx0eSBwcm9ncmFtOjEuMC4wIiwgImNyZWRfZGVmX2lkIjogIkNiRERzeUFwQzR6Sm91dHVOblRpQlk6MzpDTDo4MTQ6ZGVmYXVsdCIsICJyZXZfcmVnX2lkIjogbnVsbCwgInRpbWVzdGFtcCI6IG51bGx9XX0=\"\n      }\n    }\n  ]\n}\n\nReferences\n\nDID core specification: https://www.w3.org/TR/did-core/\nIETF Multibase Data Format specification: https://tools.ietf.org/html/draft-multiformats-multibase\nMulticodec - Compact self-describing codecs: https://github.com/multiformats/multicodec\nDIDComm message specification: https://identity.foundation/didcomm-messaging/spec/v2.1/\nLinked Data Cryptographic Suit Registry: https://w3c-ccg.github.io/ld-cryptosuite-registry/\nAries RFC 0092: Transports Return Route: https://github.com/hyperledger/aries-rfcs/tree/master/features/0092-transport-return-route\nAries RFC 0019: Encryption Envelope: https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope\nIETF RFC 7516 - JSON Web Encryption: https://datatracker.ietf.org/doc/html/rfc7516\nAries RFC 0035 - Report Problem Protocol 1.0: https://github.com/hyperledger/aries-rfcs/tree/master/features/0035-report-problem\nAries RFC  003 - Protocols: https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0003-protocols#types-of-protocols"},{"slug":"data-agreement-negotiation/1.0/","title":"Data Agreement Negotiation","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"This specification defines DIDComm protocol for a Data Controller (Data Source or Data Using Service) to send a Data Agreement offer to an Individual (Data Subject). Individuals receiving the Data Agreement Offer can decide to accept or reject it.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/data-agreement-negotiation/1.0","html":"Data Agreement Negotiation Protocol 1.0\nSummary\nThis specification defines DIDComm protocol for a Data Controller (Data Source or Data Using Service) to send a Data Agreement offer to an Individual (Data Subject). Individuals receiving the Data Agreement Offer can decide to accept or reject it.\nMotivation\nWe need a standard protocol to perform the Data Agreement Offer lifecycle.\nTutorial\nThe protocol described in this document is a request-response protocol [10]. This involves two parties, with the requester making the first move, and the responder completing the interaction. The responder role is assumed by Data Subject.\nFollowing actors identified as part of Data Agreement specification can assume the requester role:\n\na Data Source, the organisation collecting private data, (typically a data controller).  [SSI: Issuer]\na Data Using Service (DUS), an organisation processing personal data from one or more data sources to deliver a service. [SSI: Verifier]\n\nInteraction\nThe requester sends a Data Agreement offer to the responder using an already established pairwise connection (agent-to-agent communication). The responder can decide to accept or reject it. If the responder accepts the offer, it will result in credential issuance or proof presentation based on the method of use as described in the Data Agreement.\nMessages\nThe Data Agreement Offer protocol consists of these messages:\n\ndata-agreement-negotiation/1.0/offer\ndata-agreement-negotiation/1.0/reject\ndata-agreement-negotiation/1.0/accept\ndata-agreement-negotiation/1.0/problem-report\n\nOffer\nAn organisation (requester) intending to send a Data Agreement offer to a Data Subject (responder) must construct a data-agreement-negotiation/1.0/offer DIDComm message and sign it using the registered MyData DID. An example of a data-agreement-negotiation/1.0/offer DIDComm message is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-negotiation/1.0/offer\",\n    \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n    \"created_time\": \"1639288911\",\n    \"from\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n    \"body\": {\n        \"@context\": [\n            \"https://raw.githubusercontent.com/decentralised-dataexchange/automated-data-agreements/main/interface-specs/data-agreement-schema/v1/data-agreement-schema-context.jsonld\",\n            \"https://w3id.org/security/v2\"\n        ],\n        \"id\": \"d900a281-31f0-4bd5-a647-2c95136250b5\",\n        \"version\": 1,\n        \"template_id\": \"6f5c0c86-40cb-4683-a993-e8ba8cbbdaa9\",\n        \"template_version\": 1,\n        \"data_controller_name\": \"Happy Shopping AB\",\n        \"data_controller_url\": \"https://www.happyshopping.com\",\n        \"purpose\": \"Customer loyalty program\",\n        \"purpose_description\": \"Issuing loyalty cards for customers.\",\n        \"lawful_basis\": \"consent\",\n        \"method_of_use\": \"data-source\",\n        \"data_policy\": {\n            \"data_retention_period\": 365,\n            \"policy_URL\": \"https://clarifyhealth.com/privacy-policy/\",\n            \"jurisdiction\": \"Sweden\",\n            \"industry_sector\": \"Healthcare\",\n            \"geographic_restriction\": \"Europe\",\n            \"storage_location\": \"Europe\"\n        },\n        \"personal_data\": [\n            {\n                \"attribute_id\": \"be99f24e-a7fe-452b-aac5-cd564f4700b6\",\n                \"attribute_name\": \"Name\",\n                \"attribute_sensitive\": true,\n                \"attribute_category\": \"Personal\",\n                \"attribute_description\": \"Name of the user\"\n            }\n        ],\n        \"dpia\": {\n            \"dpia_date\": \"2021-12-12T10:19:46.259870+00:00\",\n            \"dpia_summary_url\": \"https://org.com/dpia_results.html\"\n        },\n        \"event\": [\n            {\n                \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n                \"time_stamp\": \"2021-12-12T11:31:38.749729+00:00\",\n                \"did\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n                \"state\": \"offer\"\n            }\n        ],\n        \"proof\": {\n            \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n            \"type\": \"Ed25519Signature2018\",\n            \"created\": \"2021-12-12T11:31:38.751698+00:00\",\n            \"verificationMethod\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n            \"proofPurpose\": \"contractAgreement\",\n            \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..MI54Jf_8BtdmsMr80nRuBbMib8aupMCFL28Nl1oliqp7pxPrRPlgywvkK63z2U29wIGd7DldDh5zHIQ406TFCA\"\n        },\n        \"data_subject_did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\"\n    },\n    \"to\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\"\n}\n\nAccept\nOn receiving the offer message, the Data Subject (responder) displays the contents of the Data Agreement offer and can decide to accept or reject it. If the Data Subject decides to accept the offer:\n\nData Agreement Offer is represented as a JSON-LD document, and proof in the document conforms to W3C LINKED DATA PROOF 1.0 specification.\nThe Data Subject should add the counter signature to the proof chain in the Data Agreement Offer using the proof algorithm.\nAn accept DIDComm plain-text message is constructed. An example is given below.\n\n{\n    \"type\": \"https://didcomm.org/data-agreement-negotiation/1.0/accept\",\n    \"id\": \"b6ca56e5-5f2a-470f-95e6-b71690964754\",\n    \"from\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n    \"to\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\",\n    \"created_time\": \"1639288936\",\n    \"body\": {\n        \"id\": \"d900a281-31f0-4bd5-a647-2c95136250b5\",\n        \"event\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n            \"time_stamp\": \"2021-12-12T11:32:05.047266+00:00\",\n            \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"state\": \"accept\"\n        },\n        \"proof\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n            \"type\": \"Ed25519Signature2018\",\n            \"created\": \"2021-12-12T11:32:05.048210+00:00\",\n            \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"proofPurpose\": \"contractAgreement\",\n            \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..pBaGGj6LcZLwUA7kl7ABfyLLi0v0YXzqNjnY03DUqcWWPWf2TPiCKlmIBcIZCkOGZbLmyLl4j_0vncsJrRYSAg\"\n        }\n    }\n}\n\nReject\nOn receiving the offer message, the Data Subject (responder) displays the contents of the Data Agreement offer and can decide to accept or reject it. If the Data Subject rejects the offer, a reject DIDComm message must be constructed and sent to the requester. This message informs the requester that the Data Subject rejected the Data Agreement Offer. An example of a reject message is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-negotiation/1.0/reject\",\n    \"id\": \"68aae3a4-7c19-4541-97c6-1388778d3a98\",\n    \"from\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n    \"to\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\",\n    \"created_time\": \"1639291116\",\n    \"body\": {\n        \"id\": \"0d805251-e448-4022-b4f9-cbe125c03156\",\n        \"event\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n            \"time_stamp\": \"2021-12-12T12:08:23.540249+00:00\",\n            \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"state\": \"reject\"\n        },\n        \"proof\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n            \"type\": \"Ed25519Signature2018\",\n            \"created\": \"2021-12-12T12:08:23.542890+00:00\",\n            \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"proofPurpose\": \"contractAgreement\",\n            \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..7vx_Tk_IjKxqe16VygonM9jl61h5karcHX_scz6UN5qaSVQG1A4tz8GDkGn-OqRi8oqb2-gfc4hv4aNCwqkBCQ\"\n        }\n    }\n}\n\nProblem Report\nErrors might occur in various places. All errors are modelled with problem-report messages. If a problem arises, the agent will respond with a problem report message that conforms to Aries RFC 0035 [9]. An example is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-negotiation/1.0/problem-report\",\n    \"id\": \"14525b0d-284f-42de-85ed-a2ca66a4d51c\",\n    \"~thread\": {\n        \"thid\": \"2ab0914c-9209-4b4a-8bf4-8df329ecbd3b\"\n    },\n    \"created_time\": \"1639289960\",\n    \"from\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\",\n    \"to\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n    \"problem-code\": \"controller_did_invalid\",\n    \"explain\": \"Controller DID is invalid.\"\n}\n\nReferences\n\nDID core specification: https://www.w3.org/TR/did-core/\nIETF Multibase Data Format specification: https://tools.ietf.org/html/draft-multiformats-multibase\nMulticodec - Compact self-describing codecs: https://github.com/multiformats/multicodec\nDIDComm message specification: https://identity.foundation/didcomm-messaging/spec/v2.1/\nLinked Data Cryptographic Suit Registry: https://w3c-ccg.github.io/ld-cryptosuite-registry/\nAries RFC 0092: Transports Return Route: https://github.com/hyperledger/aries-rfcs/tree/master/features/0092-transport-return-route\nAries RFC 0019: Encryption Envelope: https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope\nIETF RFC 7516 - JSON Web Encryption: https://datatracker.ietf.org/doc/html/rfc7516\nAries RFC 0035 - Report Problem Protocol 1.0: https://github.com/hyperledger/aries-rfcs/tree/master/features/0035-report-problem\nAries RFC  003 - Protocols: https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0003-protocols#types-of-protocols"},{"slug":"data-agreement-proofs/1.0/","title":"Data Agreement Proofs","tags":[],"license":"MIT","publisher":"lalc","avatar":"https://avatars.githubusercontent.com/u/455274?v=4&s=48","version":"1.0","status":"Production","summary":"This specification describes a DIDComm protocol to verify and authenticate the proof chain associated with a Data Agreement instance (receipt).","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/data-agreement-proofs/1.0","html":"Data Agreement Proofs Protocol 1.0\nSummary\nThis specification describes a DIDComm protocol to verify and authenticate the proof chain associated with a Data Agreement instance (receipt).\nMotivation\nWe need a standard protocol to verify and authenticate the proof chain associated with a Data Agreement instance (receipt).\nTutorial\nThe protocol described in this document is a request-response protocol [10]. This involves two parties, with the requester making the first move and the responder completing the interaction. The responder role is assumed by the Data Agreement microservice hosted by an Auditor. The requester can verify and authenticate proof chains associated with the Data Agreement instance (receipt). The requester role can be assumed by a Data Subject or Data Controller (Data Using Service or Data Source) or anyone with access to the Data Agreement instance (receipt).\nThe following actors identified as part of the Data Agreement specification can assume the responder role:\n\nan Auditor may be called in to review the data agreements and ensure that an agreement is in place in case of data breaches or regular inspection.\n\nInteraction\nA Data Agreement service (responder) will be exposing a DIDComm agent. Requester can verify and authenticate the proof chain associated with a Data Agreement instance (or receipt) using available DIDComm messages. The Data Agreement service itself will be allocated a pairwise DID, and a connection invitation message with pairwise DID as one of the recipientKey will be publicly available at an established DID configuration endpoint (\"/.well-known/did-configuration.json\") of the web server.  A sample configuration is given below.\n{\n  \"ServiceEndpoint\": \"https://da-auditor.igrant.io\",\n  \"RoutingKey\": \"\",\n  \"Invitation\": {\n    \"label\": \"DA-Auditor\",\n    \"serviceEndpoint\": \"https://da-auditor.igrant.io\",\n    \"routingKeys\": [],\n    \"recipientKeys\": [\n      \"4ZMHW7jX885o6dfXTjff2W8zkDdPXEFrxYauFmJrNwyE\"\n    ],\n    \"id\": \"8e1cc2f6-f2af-41e7-8475-fa99be1c4c99\",\n    \"type\": \"https://didcomm.org/connections/1.0/invitation\"\n  }\n}\n\nThe recipient key (public key) specified in the connection invitation is used for constructing DIDComm encryption envelopes by the requester. This envelope is sent to the DIDComm agent mentioned in the service endpoints section within the connection invitation document to communicate with the responder.\nMessages\nThe Data Agreement Offer protocol consists of these messages:\n\ndata-agreement-proofs/1.0/verify-request\ndata-agreement-proofs/1.0/verify-response\n\nVerify Request\nAn organisation (Data Using Service or Data Source) or an individual (Data Subject) can start an audit process by providing a Data Agreement instance (receipt) to the Auditor. Requester intending to verify the proof chain associated with the Data Agreement instance (or receipt) must construct an data-agreement-proofs/1.0/verify-request DIDComm message and send it to the Data Agreement service hosted by an Auditor. An example of a data-agreement-proofs/1.0/verify-request DIDComm message is:\n{\n    \"type\": \"https://didcomm.org/data-agreement-proofs/1.0/verify-request\",\n    \"id\": \"87e2a18d-f5c6-4110-8904-ac0a7f4af4db\",\n    \"to\": \"did:mydata:z6MkgMD9ukKcdgvfoD7qfxwM5jXbRDKQeKJTm2MQRqtuuEJN\",\n    \"created_time\": \"1639355850\",\n    \"from\": \"did:mydata:z6MkfsAcQsc8wQqvjNTpG2JJ2GweV31Tk5zzmrJQKmX1aQ7a\",\n    \"body\": {\n        \"data_agreement\": {\n            \"@context\": [\n                \"https://raw.githubusercontent.com/decentralised-dataexchange/automated-data-agreements/main/interface-specs/data-agreement-schema/v1/data-agreement-schema-context.jsonld\",\n                \"https://w3id.org/security/v2\"\n            ],\n            \"id\": \"0d805251-e448-4022-b4f9-cbe125c03156\",\n            \"version\": 1,\n            \"template_id\": \"6f5c0c86-40cb-4683-a993-e8ba8cbbdaa9\",\n            \"template_version\": 1,\n            \"data_controller_name\": \"Happy Shopping AB\",\n            \"data_controller_url\": \"https://www.happyshopping.com\",\n            \"purpose\": \"Customer loyalty program\",\n            \"purpose_description\": \"Issuing loyalty cards for customers.\",\n            \"lawful_basis\": \"consent\",\n            \"method_of_use\": \"data-source\",\n            \"data_policy\": {\n                \"data_retention_period\": 365,\n                \"policy_URL\": \"https://clarifyhealth.com/privacy-policy/\",\n                \"jurisdiction\": \"Sweden\",\n                \"industry_sector\": \"Healthcare\",\n                \"geographic_restriction\": \"Europe\",\n                \"storage_location\": \"Europe\"\n            },\n            \"personal_data\": [\n                {\n                    \"attribute_id\": \"be99f24e-a7fe-452b-aac5-cd564f4700b6\",\n                    \"attribute_name\": \"Name\",\n                    \"attribute_sensitive\": true,\n                    \"attribute_category\": \"Personal\",\n                    \"attribute_description\": \"Name of the user\"\n                }\n            ],\n            \"dpia\": {\n                \"dpia_date\": \"2021-12-12T10:19:46.259870+00:00\",\n                \"dpia_summary_url\": \"https://org.com/dpia_results.html\"\n            },\n            \"event\": [\n                {\n                    \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n                    \"time_stamp\": \"2021-12-12T12:06:12.632310+00:00\",\n                    \"did\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n                    \"state\": \"offer\"\n                },\n                {\n                    \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n                    \"time_stamp\": \"2021-12-12T12:08:23.540249+00:00\",\n                    \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n                    \"state\": \"reject\"\n                }\n            ],\n            \"proofChain\": [\n                {\n                    \"id\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX#1\",\n                    \"type\": \"Ed25519Signature2018\",\n                    \"created\": \"2021-12-12T12:06:12.634603+00:00\",\n                    \"verificationMethod\": \"did:mydata:z6Mkkmdx9iNHeKGYyV4Wi4uZLLpcmCKmh8uw369a6xGrY4iX\",\n                    \"proofPurpose\": \"contractAgreement\",\n                    \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..mOVJ95ax3ChixWzsbK79gCPGCqB0BrMJZza5Fu_BUTn7UwFT_CVXr6OAZeTui3QejoTLgQiIOqAWXcH23AHzCQ\"\n                },\n                {\n                    \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#2\",\n                    \"type\": \"Ed25519Signature2018\",\n                    \"created\": \"2021-12-12T12:08:23.542890+00:00\",\n                    \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n                    \"proofPurpose\": \"contractAgreement\",\n                    \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..7vx_Tk_IjKxqe16VygonM9jl61h5karcHX_scz6UN5qaSVQG1A4tz8GDkGn-OqRi8oqb2-gfc4hv4aNCwqkBCQ\"\n                }\n            ],\n            \"data_subject_did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\"\n        }\n    }\n}\n\nVerify Response\nData Agreement service hosted by the Auditor after receiving the above message processes the request; the verification of the proof chain conforms to the proof verification algorithm specified in the LINKED DATA PROOFS 1.0 specification.\nThe following algorithm specifies how to check the authenticity and integrity of a counter-signed Data Agreement (signed linked data document) by verifying its digital proof. This algorithm takes a counter-signed Data Agreement (signed linked data document) and outputs a true or false value based on whether or not the digital proof on the signed document was verified. Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.\n\nGet the public key by dereferencing its URL identifier in the proof node of the default graph of the signed document. Confirm that the linked data document that describes the public key specifies its owner and that its owner's URL identifier can be dereferenced to reveal a bi-directional link back to the key. Ensure that the key's owner is a trusted entity before proceeding to the next step.\nLet the document be a copy of the countersigned Data Agreement.\nRemove any proof nodes from the default graph in the document and save them as proof.\nGenerate a canonicalised document by canonicalising the document according to the canonicalisation algorithm (e.g. the URDNA2015 [RDF-DATASET-NORMALIZATION] algorithm).\nCreate a value tbv that represents the data to be verified, and set it to the result of running the Create Verify Hash Algorithm, passing the information in proof.\nPass the proofValue, tbv, and the public key to the proof algorithm (e.g. JSON Web Proof using RSASSA-PKCS1-v1_5 algorithm). Return the resulting boolean value.\n\nData Agreement service (responder) will respond with a DIDComm message of type data-agreement-proofs/1.0/verify-response. An example is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-proofs/1.0/verify-response\",\n    \"id\": \"5c294a66-fa7f-4a61-a22c-8bdebc74f8f2\",\n    \"~thread\": {\n        \"thid\": \"87e2a18d-f5c6-4110-8904-ac0a7f4af4db\"\n    },\n    \"status\": \"OK\",\n    \"explain\": \"Signature verification successful.\"\n}\n\nReferences\n\nDID core specification: https://www.w3.org/TR/did-core/\nIETF Multibase Data Format specification: https://tools.ietf.org/html/draft-multiformats-multibase\nMulticodec - Compact self-describing codecs: https://github.com/multiformats/multicodec\nDIDComm message specification: https://identity.foundation/didcomm-messaging/spec/\nLinked Data Cryptographic Suit Registry: https://w3c-ccg.github.io/ld-cryptosuite-registry/\nAries RFC 0092: Transports Return Route: https://github.com/hyperledger/aries-rfcs/tree/master/features/0092-transport-return-route\nAries RFC 0019: Encryption Envelope: https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope\nIETF RFC 7516 - JSON Web Encryption: https://datatracker.ietf.org/doc/html/rfc7516\nAries RFC 0035 - Report Problem Protocol 1.0: https://github.com/hyperledger/aries-rfcs/tree/master/features/0035-report-problem\nAries RFC  003 - Protocols: https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0003-protocols#types-of-protocols"},{"slug":"data-agreement-termination/1.0/","title":"Data Agreement Termination","tags":[],"license":"MIT","publisher":"lalc","avatar":"https://avatars.githubusercontent.com/u/455274?v=4&s=48","version":"1.0","status":"Production","summary":"This specification describes a DIDComm protocol for a Data Subject to terminate a Data Agreement and notify the Organisation.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/data-agreement-termination/1.0","html":"Data Agreement Termination Protocol 1.0\nSummary\nThis specification describes a DIDComm protocol for a Data Subject to terminate a Data Agreement and notify the Organisation (Data Using Service or Data Source)\nMotivation\nThe Data Agreement may be terminated in many ways. Here are a few of the scenarios:\n\nData Agreement expired, and the service is no longer applicable\nUpdated Data Agreement with the new purpose or changes to collected PII categories\nIndividual requests to terminate the service before the expiration date\nIndividual requests not only to terminate but to have their personal data erased\n\nNote the erasure may come after the termination of the Data Agreement.\nTutorial\nThe protocol described in this document is a request-response protocol [10]. This involves two parties, with the requester making the first move and the responder completing the interaction. The responder role is assumed by an Organisation (Data Source or Data Using Service). The requester can initiate the Data Agreement termination.\nThe following actors identified as part of the Data Agreement specification can assume the requester role:\n\na Data Subject or Individual. [SSI: Holder]\n\nOnce a Data Agreement is terminated, the proofs associated with termination are recorded to the Data Agreement service hosted by the Organisation (Data Using Service or Data Source), which acts as a central source of truth.\nInteraction\nUsing an already established pairwise connection (agent-to-agent communication) requester can initiate the data agreement termination process by sending a terminate message to the Organisation. The responder (Organization) records the termination event in the Data Agreement receipt and takes the necessary actions to fulfil the termination request. The responder acknowledges the termination request by responding with a terminate-ack message.\nMessages\nThe Data Agreement Termination protocol consists of these messages:\n\ndata-agreement-termination/1.0/terminate\ndata-agreement-termination/1.0/terminate-ack\ndata-agreement-termination/1.0/problem-report\n\nTerminate\nA Data Subject (requester) intending to terminate a Data Agreement initiates the termination process by recording a termination event and corresponding proof in the Data Agreement receipt. This event and proof are then sent to the Organisation to notify them about the termination. Data Subject (requester) must construct a terminate DIDComm message and send it to the Organisation (responder) using an already established pairwise connection (agent-to-agent communication). An example of a terminate DIDComm message is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-termination/1.0/terminate\",\n    \"id\": \"418cd2fe-d20d-49e1-a73e-7782c51e1dd1\",\n    \"to\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\",\n    \"body\": {\n        \"id\": \"d900a281-31f0-4bd5-a647-2c95136250b5\",\n        \"event\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#3\",\n            \"time_stamp\": \"2021-12-13T06:25:56.776512+00:00\",\n            \"did\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"state\": \"terminate\"\n        },\n        \"proof\": {\n            \"id\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND#3\",\n            \"type\": \"Ed25519Signature2018\",\n            \"created\": \"2021-12-13T06:25:56.779880+00:00\",\n            \"verificationMethod\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n            \"proofPurpose\": \"contractAgreement\",\n            \"proofValue\": \"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..GDrsga7RanAgMRLRvlHUSkNlLWauuRkA-uTHfovi_kkA-c9x2ZivW0B-dY3s5nI0xRMX9Sjuqq2fjGgpVaj8CA\"\n        }\n    },\n    \"from\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n    \"created_time\": \"1639356970\"\n}\n\nTerminate Ack\nOn receiving the terminate message and processing it, the organisation (responder) must construct a terminate-ack DIDComm message and send it to the Data Subject (responder) using an already established pairwise connection (agent-to-agent communication). The organisation informs the Data Subject that the associated data is no longer bound to the Data Agreement. An example of a terminate-ack DIDComm message is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-termination/1.0/terminate-ack\",\n    \"id\": \"5f5225d4-5df3-480c-b7b5-9029bd0a17c3\",\n    \"~thread\": {\n        \"thid\": \"418cd2fe-d20d-49e1-a73e-7782c51e1dd1\"\n    },\n    \"status\": \"OK\"\n}\n\nProblem Report\nErrors might occur in various places. All errors are modelled with problem-report messages. If a problem arises, the agent will respond with a problem report message that conforms to Aries RFC 0035 [9]. An example is given below.\n{\n    \"type\": \"https://didcomm.org/data-agreement-termination/1.0/problem-report\",\n    \"id\": \"14525b0d-284f-42de-85ed-a2ca66a4d51c\",\n    \"~thread\": {\n        \"thid\": \"2ab0914c-9209-4b4a-8bf4-8df329ecbd3b\"\n    },\n    \"created_time\": \"1639289960\",\n    \"from\": \"did:mydata:z6MkpzHAuPc4N2jgXg23ikZjp2tQSTEHqnzzr9683AQ2EvCV\",\n    \"to\": \"did:mydata:z6MkhnMkWDytfVEL88BRmWGeLN9vGhpdJ612QTgVMt1agqND\",\n    \"problem-code\": \"data_agreement_not_found\",\n    \"explain\": \"Data Agreement not found.\"\n}\n\nReferences\n\nDID core specification: https://www.w3.org/TR/did-core/\nIETF Multibase Data Format specification: https://tools.ietf.org/html/draft-multiformats-multibase\nMulticodec - Compact self-describing codecs: https://github.com/multiformats/multicodec\nDIDComm message specification: https://identity.foundation/didcomm-messaging/spec/\nLinked Data Cryptographic Suit Registry: https://w3c-ccg.github.io/ld-cryptosuite-registry/\nAries RFC 0092: Transports Return Route: https://github.com/hyperledger/aries-rfcs/tree/master/features/0092-transport-return-route\nAries RFC 0019: Encryption Envelope: https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope\nIETF RFC 7516 - JSON Web Encryption: https://datatracker.ietf.org/doc/html/rfc7516\nAries RFC 0035 - Report Problem Protocol 1.0: https://github.com/hyperledger/aries-rfcs/tree/master/features/0035-report-problem\nAries RFC  003 - Protocols: https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0003-protocols#types-of-protocols"},{"slug":"data-disclosure-agreement/1.0/","title":"Data Disclosure Agreement","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A Data Disclosure Agreement (DDA) enables automated agreement handling for data exchange between a Data Source (DS) and Data Using Service (DUS).","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/data-disclosure-agreement/1.0","html":"Data Disclosure Agreement Protocol Specification\nSpecification Status: version 1.0.0 (Ready for impplementation)\nThis is reviewed and implementation has started. This spec is live and is being iterated as part of the PS-SDA project in NGI-ONTOCHAIN. The project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 957338.\nLatest Draft: Avaialble here\nEditors:\nMr. George Padayatti (iGrant.io, Sweden)\nMr. Lal Chandran (iGrant.io, Sweden)\nContributors and Reviwers:\nMs. Lotta Lundin (iGrant.io, Sweden)\nDr. David Goodman (iGrant.io, Sweden)\nMr. Jan Linquist (Linaltec, Sweden)\nParticipate\n\nGitHub repo\nFile a bug\nCommit history\n\nAbstract\nA Data Disclosure Agreement (DDA) enables automated agreement handling for data exchange between a Data Source (DS) and Data Using Service (DUS). It helps organisations to continue leveraging their data assets while being transparent and legitimate in their data usage. Automated agreement handling is a requisite for a scalable and regulatory-compliant data marketplace.. It also provides individuals control over how their data is used and exchanged.\nProtocol flow\nActors\n\nData Using Service (DUS)\nData Source (DS)\nIndividual\nData Intermediary\n\nPre-requisite\nThe prerequisites are:\n\nAll the actors involved in the protocol flow are DIDComm agents. Each interaction between the actors requires a DIDComm message.\n\nPrior to the PS-SDA protocol flow, actors must establish connections [1] between each other and identify themselves by presenting the necessary proofs [2].\n\nAll the actors will have a wallet (mobile or cloud-based, individual and potentially for an enterprise) address and an associated public / private key pair.\n\nA wallet address is an externally owned account (EOA) address. Ethereum addresses are composed of the prefix \"0x\" (hexadecimal) concatenated with the rightmost 20 bytes of the Keccak-256 hash of the ECDSA public key with the curve secp256k1.\n\nOut of scope\nThe administrative and governance frameworks of the “marketplace” or “data space” is out of scope. The marketplace has performed the proof of business and onboarded DS and DUS.\nPublish DDA offer to Marketplace (DS)\n\nMessages\nThe /dda-marketplace/1.0 protocol consists of these messages:\n\n/dda-marketplace/1.0/publish-request\n/dda-marketplace/1.0/publish-response\n\nSign the DDA offer\nThe DS signs the DDA offer using the secp256k1 private key. The signature is prepared by performing the proof algorithm described by W3C Data Integrity 1.0 specification [3].\nSend signed DDA offer to Data Intermediary\nThe DS construct a DIDComm message of type /dda-marketplace/1.0/publish-request and sends it to the Data Intermediary DIDComm agent. An example is provided below.\n{\n  \"type\": \"https://didcomm.org/dda/1.0/publish-request\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"data_disclosure_agreement\": {}\n  }\n}\n\nData Intermediary stores the signed DDA offer to CAS\nOnce the DDA is received from the DS, the Data Intermediary stores the offer in Content Addressable Storage (CAS) for e.g. IPFS and obtains the Content Identifier (CID).\nData Intermediary anchors CID to Ethereum\nThe Content Identifier (CID) pointing to a specific DDA offer is anchored to Ethereum by executing the publishDDACID smart contract function.\nThe Data Intermediary create a /dda-marketplace/1.0/publish-response DIDComm message and sends it to the DS. This message contains Ethereum transaction hash for the DS to verify the transaction. An example is provided below:\n{\n  \"type\": \"https://didcomm.org/dda/1.0/publish-response\",\n  \"id\": \"53f19e0b-5be2-480a-92bc-fcdeabf69ad3\",\n  \"~thread\": {\n        \"thid\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\"\n    },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"txn_hash\": \"0xeba2df809e7a612a0a0d444ccfa5c839624bdc00dd29e3340d46df3870f8a30e\"\n  }\n}\n\nData intermediary publishes the DDA offer to a data marketplace\nThe data marketplace will subscribe to the smart contract events specific to publishDDACID function and list the DDA in the marketplace. [4]\nNegotiate DDA\nThe DIDComm protocol is used to facilitate interaction between DS and DUS to negotiate terms for the DDA.\n\nMessages\nThe /dda-negotiation/1.0 protocol consists of these messages:\n\n/dda-negotiation/1.0/propose-terms\n/dda-negotiation/1.0/accept-terms\n/dda-negotiation/1.0/reject-terms\n/dda-negotiation/1.0/accept-dda\n\nDUS proposes terms for DDA (Counter offer)\nResolve CID to obtain a DDA offer from IPFS and then construct a counter proposal if the \"terms\" are not satisfactory. An example is as provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/1.0/propose-terms\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"data_disclosure_agreement\": {}\n  }\n}\n\nDS accepts the proposed terms\nThe DS updates the DDA to include the proposed terms and signs it. A copy of the same is sent to the DUS for counter-signing. An example is as provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/dda-negotiation/1.0/accept-terms\",\n  \"id\": \"53f19e0b-5be2-480a-92bc-fcdeabf69ad3\",\n  \"~thread\": {\n        \"thid\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\"\n    },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"data_disclosure_agreement\": {}\n  }\n}\n\nDS rejects the proposed terms\nAn example is provided below.\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/dda-negotiation/1.0/reject-terms\",\n  \"id\": \"53f19e0b-5be2-480a-92bc-fcdeabf69ad3\",\n  \"~thread\": {\n        \"thid\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\"\n    },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n}\n\nDUS accepts the DDA\nThe DUS counter signs the DDA and sends a copy to the DS. An example is as provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/dda-negotiation/1.0/accept-dda\",\n  \"id\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n  \"body\": {\n    \"data_disclosure_agreement\": {}\n  }\n}\n\nExchange personal data between DS and DS with unknown individual identity (E.g. Anonymised data exchange)\nIn this mode of personal data exchange, DS and DUS do not need individual identity proof before the data is exchanged e.g. in the case of a DUS using anonymous or pseudonymous data sharing to offer personalised services,\n\nDA Negotiation\nDS and Individual agree on the terms of data usage in conformance to ADA RFC 0003.\nRelease personal data\nMessages\nThe /data-exchange/1.0 protocol consists of these messages:\n\n/data-exchange/1.0/request-access\n/data-exchange/1.0/grant-access\n\nDUS request access to personal data\nThe DUS requests access to personal data by presenting the hash of a signed DDA document to the DS. An example is provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/data-exchange/1.0/request-access\",\n  \"id\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n  \"body\": {\n    \"dda_hash\": \"\"\n    \"nonce\": \"\"\n  }\n}\n\nDS grant access to personal data\nThe DS validates (checks for e.g. expiry, revocation list etc.), authenticates the DDA and releases an \"access_token\" to the protected resources.\nThe Access Token is constructed according to JWT IETF 7519. The Access Token claim set contains necessary claims for access to the protected resource. Following are the mandatory claims.\n\ndda: Hash of the signed DDA.\nresource_endpoints: Array of protected resource endpoints which accept the Access Token.\niss (issuer): Issuer of the JWT\nsub (subject): Subject of the JWT (the user)\naud (audience): Recipient for which the JWT is intended\nexp (expiration time): Time after which the JWT expires\nnbf (not before time): Time before which the JWT must not be accepted for processing\niat (issued at the time): Time at which the JWT was issued; can be used to determine the age of the JWT\njti (JWT ID): Unique identifier; can be used to prevent the JWT from being replayed (allows a token to be used only once)\n\nTo ensure secure Access Token issuance, we implement an Authenticated Key Exchange (AKE) cryptographic protocol. The AKE provides additional security against potential attacks (MITM, replay attacks, etc.).\nThe AKE1 variant, as described in chapters 21.1-21.2 ( https://toc.cryptobook.us/book.pdf) is implemented.\nThe AKE is a non-interactive protocol. The steps are provided below.\n\nEncrypt the Access Token using the secp256k1 public key associated with the DUS to obtain the cipher text. (AES-CBC ECIES)\n\nGenerate a signature for the cipher text.\n\nThe DS publishes the access token to Ethereum by executing the publishAccessToken smart contract function. This function accepts three parameters:\n\ncipher_text\nsig\nnonce\n\nThe DS constructs a /data-exchange/1.0/grant-access DIDComm message with an Ethereum transaction hash in the body and responds to the DUS. An example is provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/data-exchange/1.0/grant-access\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"~thread\": {\n        \"thid\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\"\n    },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n  \"body\": {\n    \"txn_hash\": \"0xeba2df809e7a612a0a0d444ccfa5c839624bdc00dd29e3340d46df3870f8a30e\"\n  }\n}\n\nDUS obtains the access token\nThe DUS resolves the transaction to obtain the cipher_text, sig and nonce, then proceeds to perform the following steps:\n\nDecrypts the cipher_text using a private key (AES-CBC ECIES)\nVerifies the signature\nDecodes the payload in the Access Token JWT to obtain claims and identify the endpoints accessible for the access token\n\nNote: Cipher text format - .\nExchange personal data between DS and DS with known individual identity\nThe DS and DUS require individual identity proof before the data is exchanged. This is the case, for e.g. during a registration process, check-ins, covid-credential exchange etc.\n\nThe Individual in the above flow diagram maintains two identities. They are:\n\nIdentity_DS - Identity of Individual at DS\nIdentity_DUS - Identity of Individual at DUS\n\nDA Negotiation between DS and Individual\nThe DS and Individual agree on the terms of data usage in conformance to ADA RFC 0003.\nDDelegated DA Negotiation between DUS and Individual\nMessages\nThe /delegated-da-negotiation/1.0 protocol consists of these messages:\n\n/delegated-da-negotiation/1.0/initiate\n/delegated-da-negotiation/1.0/connection-invitation\n/delegated-da-negotiation/1.0/offer\n/delegated-da-negotiation/1.0/accept\n/delegated-da-negotiation/1.0/reject\n/delegated-da-negotiation/1.0/forward\n\nDUS requests DS to collect sign-off for DA (DUS) from Identity_DS\nAn example is as provided below:\n{\n  \"type\": \"https://didcomm.org/delegated-da-negotiation/1.0/initiate\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"da\": {}\n  }\n}\n\nDS responds with connection-invitation for the individual.\nAn example is provided below.\n{\n  \"type\": \"https://didcomm.org/delegated-da-negotiation/1.0/initiate\",\n  \"id\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\",\n  \"~thread\": {\n    \"thid\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\"\n  },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"invitation\": {\n      \"serviceEndpoint\": \"https://didcomm.data-source.com/\",\n      \"routingKeys\": [],\n      \"recipientKeys\": [\n        \"kHJvUaokuKfz4sELM6qCSELiHxBNikjcMnvjo3Kjq8L\"\n      ],\n      \"@id\": \"cf4bbbab-a60a-472c-9d9f-66852b20f6cb\",\n      \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/connections/1.0/invitation\"\n    }\n  }\n}\n\nIndividual establishes connection with DS\nThe DUS presents the connection-invitation received from DS to Individual as QR code (or other means). The Individual establishes a connection with the DS. [1]\nDS identifies Individual as Identity_DS\nThe DS identifies the Individual by requesting proof presentation for Verifiable Credential [2] that was issued when Individual onboarded to DS.\nDS offers DA to Individual on behalf of  DUS\nThe DS checks if a DA (purpose: 3rd party disclosure) exists between the DS and Individual. If such exists, the DS adds the offer_endorsed event to the DA and signs it. The signed DUS DA is offered to the Individual. An example is as provided below:\n{\n  \"type\": \"delegated-da-negotiation/1.0/offer\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\",\n  \"body\": {\n    \"da\": {}\n  }\n}\n\nIndividual accepts the DA\nIndividual constructs the DIDComm message in accordance to ADA RFC 0003.\nIndividual rejects the DA\nIndividual constructs the DIDComm message in accordance to ADA RFC 0003. The individual constructs a forward message with the DUS as the recipient and sends it to the DS. The DS will forward the same to the DUS.\nDS forwards the response from Individual to DUS\nDUS process the /forward message from received DS in accordance to Aries RFC 0094\nRelease personal data\nMessages\nThe /data-exchange/1.0 protocol consists of these messages:\n\n/data-exchange/1.0/request-access\n/data-exchange/1.0/grant-access\n\nDUS requests access to personal data\nThe DUS requests access to personal data by presenting the hash of a signed DUS DA document to the DS. An example is provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/data-exchange/1.0/request-access\",\n  \"id\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\",\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n  \"body\": {\n    \"da_hash\": \"\"\n    \"nonce\": \"\"\n  }\n}\n\nDS grant access to personal data\nThe DS validates (for e.g., check expiry, check revocation list) and authenticates the DUS DA and releases an \"access_token\" to the protected resources.\nAn Access Token is constructed according to JWT IETF 7519. The Access Token claim set contains necessary claims for access to the protected resource. The following are mandatory claims.\n\ndda: Hash of the signed dda.\nda: Hash of the signed da\nresource_endpoints: Array of protected resource endpoints which accepts the Access Token.\niss (issuer): Issuer of the JWT\nsub (subject): Subject of the JWT (the user)\naud (audience): Recipient for which the JWT is intended\nexp (expiration time): Time after which the JWT expires\nnbf (not before time): Time before which the JWT must not be accepted for processing\niat (issued at time): Time at which the JWT was issued; can be used to determine age of the JWT\njti (JWT ID): Unique identifier; can be used to prevent the JWT from being replayed (allows a token to be used only once)\n\nTo ensure secure Access Token issuance, we implement an Authenticated Key Exchange (AKE) cryptographic protocol. The AKE provides additional security against potential attacks (MITM, replay attacks, etc.).\nAn AKE1 variant, as described in chapters 21.1-21.2 ( https://toc.cryptobook.us/book.pdf) is implemented.\nThe AKE is a non-interactive protocol. The steps are provided below.\n\nEncrypt the Access Token using the secp256k1 public key associated with DUS to obtain the cipher text. (AES-CBC ECIES)\nGenerate a signature for the cipher text.\n\nThe DS publishes the access token to Ethereum by executing the publishAccessToken smart contract function. This function accepts three parameters:\n\ncipher_text\nsig\nnonce\n\nThe DS constructs /data-exchange/1.0/grant-access a DIDComm message with the Ethereum transaction hash in the body and responds to the DUS. An example is provided below:\n{\n  \"type\": \"https://didcomm.org/dda-negotiation/data-exchange/1.0/grant-access\",\n  \"id\": \"999f6c2b-b0e5-4123-aab0-b5f7bfc780c4\",\n  \"~thread\": {\n        \"thid\": \"1b8381a8-5b7a-44b0-a6b6-037a4aac5609\"\n    },\n  \"created_time\": \"1639288911\",\n  \"from\": \"\",\n  \"to\": \"\"\n  \"body\": {\n    \"txn_hash\": \"0xeba2df809e7a612a0a0d444ccfa5c839624bdc00dd29e3340d46df3870f8a30e\"\n  }\n}\n\nDUS obtains the access token\nThe DUS resolves the transaction to obtain the cipher_text, sig and nonce, then proceeds to perform the following steps.\n\nDecrypts the cipher_text using a private key. (AES-CBC ECIES)\nVerifies the signature.\nDecodes the payload in Access Token JWT to obtain claims and identify the endpoints accessible for the access token.\n\nNote: Cipher text format -\nSmart Contracts\nFollowing are the smart contracts that will be used in the protocol:\n\nEthereum DID Registry smart contract for did:ethr identifiers\nDDA Marketplace smart contract\n\npublishDDACID(CID)\npublishAccessToken(cipher_text, sig, nonce)\n\nImplementation Considerations\nSuccessful execution of protocols described in this document might involve invoking sub-protocols; a coroutine approach can simplify this, where it is possible to compose multiple protocols to achieve a complex goal. For e.g. during the exchange of personal data with the identification of individuals, it is necessary for the DS to invoke a \"Connections'' protocol and then a \"Verifications\" protocol, e.t.c, after which the DS gets back to the DUS with a positive or negative response. All this while the DUS can check the status of an active protocol with the DS. This approach is being discussed in detail at Aries RFC 0478.\nReferences\n\nAries RFC 0160 Connection protocol - https://github.com/hyperledger/aries-rfcs/tree/main/features/0160-connection-protocol\nAries RFC 0037 Present Proof protocol - https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof\nW3C Data Integrity 1.0 specification - https://w3c-ccg.github.io/data-integrity-spec\nhttps://ethereum.org/en/developers/docs/smart-contracts/anatomy/#events-and-logs\n\nAppendix A\nA.1\tAbbreviations\n\nAbbr.\n\nDescription\n\nADA\n\nAutomated Data Agreements\n\nCRUD\n\nCreate / Read / Update / Delete\n\nDA\n\nData Agreement\n\nDAO\n\nDecentralized Autonomous Organizations\n\nDDA\n\nData Disclosure Agreement (Introduced first in this specification)\n\nDEXA\n\nData Exchange Agreements\n\nDID\n\nDecentralised Identifier (according to W3C)\n\nDPA\n\nData Processing Agreement\n\nDPIA\n\nData Protection Impact Assessment\n\nDS\n\nData Source\n\nDUS\n\nData Using Service\n\nEEA\n\nEuropean Economic Area\n\nEU\n\nEuropean Union\n\nGDPR\n\nGeneral Data Protection Regulation\n\nIPFS\n\nInter Planetary File System\n\nISO\n\nInternational Organization for Standardization\n\nJSON\n\nJavaScript Object Notation\n\nSDK\n\nSoftware Development Kit\n\nSSI\n\nSelf Sovereign Identity\n\nToIP\n\nTrust over Internet Protocol\n\nVC\n\nVerifiable credentials\n\nW3C\n\nWorld wide web consortium\n\nA.2\tTerminology\n\nTerm\n\nDescription\n\nData Agreement (DA)\n\nA data agreement exists between organisations and individuals in the use of personal data. This agreement can have any legal basis outlined according to any data protection regulation, such as the GDPR.\n\nData Disclosure Agreement (DDA)\n\nData disclosure agreements are formal contracts that detail what data is being shared and the appropriate use for the data between a DS and a DUS. It records conditions on which a DUS will consume data from a DS. A DDA could contain both personal and non-personal data.\n\nDecentralised IDentifier (DID)\n\nA DID is a new type of identifier that is globally unique, resolvable with high availability, and cryptographically verifiable. DIDs are typically associated with cryptographic material, such as public keys and service endpoints, for establishing secure communication channels.\n\nData Processing Agreement\n\nA Data Processing Agreement is a legally binding contract, either in written or electronic form, entered between a data processor and a data controller that states the rights and obligations of each party concerning the protection of personal data. The agreement will be legally binding in any data protection regulation, such as the GDPR.\n\nData Source (DS)\n\nThe role responsible for collecting, storing, and controlling personal data that persons, operators, and DUSs may wish to access and use; is defined as per MyData.\n\nData Using Service (DUS)\n\nThe role responsible for processing personal data from one or more data sources to deliver a service; is defined as per MyData\n\nData Protection Impact Assessment (DPIA).\n\nA Data Protection Impact Assessment is a process designed to help systematically analyse, identify and minimise the data protection risks of a project or plan.\n\nIndividual\n\nA natural, living human being, in the GDPR, also referred to as a data subject\n\nInter Planetary File System (IPFS\n\nThe InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system. IPFS uses content-addressing to uniquely identify each file in a global namespace connecting all computing devices\n\nSelf Sovereign Identity\n\nA model for managing digital identities where individual identity holders can create and control their verifiable credentials without being forced to request permission from an intermediary or centralised authority and give control over how their data is shared and used"},{"slug":"discover-features/1.0/","title":"Discover Features","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"This protocol, defined in the DIDComm Messaging Spec, helps agents query one another to discover which features they support, and to what extent.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/discover-features/1.0","html":"This protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0031-discover-features\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 2.0 version of this protocol that complies also with DIDComm v2 headers. Version 2.0 can be found here"},{"slug":"discover-features/2.0/","title":"Discover Features","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"This protocol, defined in the DIDComm Messaging Spec, helps agents query one another to discover which features they support, and to what extent.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/discover-features/2.0","html":"Details\nThe version 2.0 of this protocol was originally introduced in Aries RFC 0557: Discover Features Protocol v2.x. A DIDComm v2 version was updated and included in the specification here: https://identity.foundation/didcomm-messaging/spec/#discover-features-protocol-20.\nYou can find the detail of the protocol in above-mentioned references. Semantics of both DIDComm v1 and v2 are similar, only differing in message decorators and headers as follows:\nQuery Message\n\nDIDComm v1 example\n\n{\n  \"@type\": \"https://didcomm.org/discover-features/2.0/queries\",\n  \"@id\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n  \"queries\": [\n    { \"feature-type\": \"protocol\", \"match\": \"https://didcomm.org/tictactoe/1.*\" },\n    { \"feature-type\": \"goal-code\", \"match\": \"aries.*\" }\n  ]\n}\n\nDIDComm v2 example\n\n{\n    \"type\": \"https://didcomm.org/discover-features/2.0/queries\",\n    \"id\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n    \"body\": {\n        \"queries\": [\n            { \"feature-type\": \"protocol\", \"match\": \"https://didcomm.org/tictactoe/1.*\" },\n            { \"feature-type\": \"goal-code\", \"match\": \"org.didcomm.*\" }\n        ]\n    }\n}\n\nDisclose Message\n\nDIDComm v1 example\n\n{\n  \"@type\": \"https://didcomm.org/discover-features/2.0/disclosures\",\n  \"~thread\": { \"thid\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\" },\n  \"disclosures\": [\n    {\n      \"feature-type\": \"protocol\",\n      \"id\": \"https://didcomm.org/tictactoe/1.0\",\n      \"roles\": [\"player\"]\n    },\n    {\n      \"feature-type\": \"goal-code\",\n      \"id\": \"aries.sell.goods.consumer\"\n    }\n  ]\n}\n\nDIDComm v2 example\n\n{\n    \"type\": \"https://didcomm.org/discover-features/2.0/disclose\",\n    \"thid\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n    \"body\":{\n        \"disclosures\": [\n            {\n                \"feature-type\": \"protocol\",\n                \"id\": \"https://didcomm.org/tictactoe/1.0\",\n                \"roles\": [\"player\"]\n            },\n            {\n                \"feature-type\": \"goal-code\",\n                \"id\": \"org.didcomm.sell.goods.consumer\"\n            }\n        ]\n    }\n}"},{"slug":"issue-credential/1.1/","title":"Issue Credential","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.1","status":"Production","summary":"Formalizes messages used to issue a credential, whether the credential is JWT-oriented, JSON-LD-oriented, or ZKP-oriented.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/issue-credential/1.1","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0036-issue-credential"},{"slug":"issue-credential/2.0/","title":"Issue Credential","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"Formalizes messages used to issue a credential, whether the credential is JWT-oriented, JSON-LD-oriented, or ZKP-oriented.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/issue-credential/2.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0453-issue-credential-v2"},{"slug":"issue-credential/3.0/","title":"Issue Credential","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Draft","summary":"Formalizes messages used to issue a credential, whether the credential is JWT-oriented, JSON-LD-oriented, or ZKP-oriented.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/issue-credential/3.0","html":"Details\nThis protocol is proposed here: https://github.com/decentralized-identity/waci-didcomm/tree/main/issue_credential\nIt is part of WACI-DIDComm Interop Profile v1.0, colloqually known as WACI PEx, a DIDComm v2 profile for supporting the Wallet and Credential Interaction (WACI) Protocols for both Issuance and Presentation Exchange. It is defined here: https://identity.foundation/waci-didcomm/v1.0/"},{"slug":"media-sharing/1.0/","title":"Media Sharing","tags":[],"license":"MIT","publisher":"genaris","avatar":"https://avatars.githubusercontent.com/u/4800462?v=4&s=48","version":"1.0","status":"Demonstrated","summary":"A protocol to share large media files (and any content in general) in a secure and efficient manner.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/media-sharing/1.0","html":"Summary\nA protocol to share large media files (and any content in general) in a secure and efficient manner.\nThis protocol is intended to be used by any DIDComm agent willing to share large data to a single or multiple connections.\nMotivation\nDIDComm allows to establish secure, trusted connections and exchange arbitrary data between parties involved in them. However, due to the fact that it is transport-agnostic and generic enough to be run in a wide range of agents, exchanging inlined data through this channel only might not be as efficient (in terms of bandwith and CPU power) as doing so by using other mechanisms, especially when a large amount of data is being shared and more than a single pair of devices are involved in such exchange (e.g. multi-party connections or peers who are using more than a device).\nFor such cases, this protocol is defined to share data by reference, relying on third-party services to do the actual upload/storage/download. Depending on the trust on such third-party services, files can be previously encrypted or simply left as plain data.\nRoles\nThere are two roles in this protocol:\n\nsender - The agent willing to share media files\nreceiver - The agent that will receive the shared media\n\nBasic Walkthrough\nIn an initial file sharing, the sender will typically generate content encryption keys (CEK) for each file they want to share. This step could be omitted in case of media items that are encoded inline in DIDComm channel.\nThen, it will upload encrypted contents in such a way that they are accesible in an URI reachable by the recipient.\nWith this information, it will generate the share-media message that will be received by the receiver, who will download and decrypt all shared files the message might contain. If requested, it will answer with an ack confirming the correct reception of the message (however, this does not mean it could properly interpret or download each shared file). problem-report could be used to inform the sender about any issue downloading or decrypting the contents (TODO: define error codes).\n\nThere is another possible flow, where the protocol is started by the request of a previously shared file that appears to not be available by the recipient (e.g. they deleted the file locally and the sender has already deleted it as well from the shared file server).\nIn such case, the protocol starts with a request-media message which should use the original protocol thid as pthid.\n\nStates\nDepending on the role, the following states are possible:\nSender states\n\nmedia-requested\nmedia-shared\ndone\n\nReceiver states\n\nmedia-requested\nmedia-received\ndone\n\nMessage Reference\nThis protocol currently defines a few specific messages, but uses DIDComm core mechanisms such as attachments and localization (and may use other extensions) to enrich the flow.\nShare Media\nThrough this message, a sender can share a number of media items, each of them referencing to an attachment ( appended attachment in case of DIDComm v1), adding a few optional fields regarding the nature of the media being shared.\nAppended attachments MUST define at least an id and a media_type (DIDComm v1) or mime-type (DIDComm v2), in order to be properly identified and classified.\nThe message may indicate the language used for the description. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.\nThe time the message is sent must be included. DIDComm V2 uses the created_time header. DIDComm V1 must include a sent_time as a message attribute containing the timestamp in ISO 8601 UTC format.\nDescription of the fields:\n\ndescription : (optional) human-readable string to describe (as a whole) the media items to be shared\nitems : (required) array containing details of the items to be shared. Each containing:\n\n@id : (required) unique id for the item. This is used to reference the item from other messages (e.g. request-media)\nattachment_id : (required) id for the attachment that contains further description of the item itself\nciphering : (optional) media ciphering details, containing all required key material for the receiver to decrypt it. Present only in case media has been encrypted.\n\nalgorithm : symmetric encryption algorithm used to encrypt the media, in the format - - (lowercase). E.g. aes-256-cbc\nparameters : object containing parameters needed to decrypt the data. This depends on the algorithm used, but the following fields are supported initially:\n\nkey : content encryption key, formatted as an hex string\niv : initialization vector, formatted as an hex string\ntag : authentication tag, formatted as an hex string\n\nmetadata : (optional) any relevant information that might be used by an agent to better show the item. Some initial known fields are:\n\npreview : base64 string containing a thumbnail (used mostly for images and videos)\nblurhash : compact representation of a placeholder for an image (used mostly for images and videos)\nduration : number containing media duration in seconds (used mostly for videos and audio files)\ntitle : a descriptible title for the item shared (in addition to the regular description)\nicon : URL or Data URL containing an icon to describe the item\n\nDIDComm v1 example:\n{\n    \"@id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"@type\": \" /share-media\",\n    \"description\": \"free text describing the files that are about to be shared\",\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"items\": [\n        {\n            \"@id\": \"f88b7925-4cb4-4e32-b1d6-ac217c9fedbf\",\n            \"attachment_id\": \"item1\",\n            \"ciphering\": {\n                \"algorithm\": \"aes-256-cbc\",\n                \"parameters\" : {\n                    \"iv\": \"2f3849399c60cb04b923bd33265b81c7\",\n                    \"key\": \"233f8ce4ac6aa125927ccd98af5750d08c9c61d98a3f5d43cbf096b4caaebe80\"\n                }\n            },\n             \"metadata\": { \"blurhash\": \"LGF5?xYk^6#M@-5c,1J5@[or[Q6.\" }\n        }\n        ... \n    ],\n    \"~attach\": [{\n        \"@id\": \"item1\",\n        \"byte_count\": \"23894\",\n        \"mime-type\": \"image/png\",\n        \"filename\": \"image1.png\",\n        \"description\": \"This particular image description\",\n        \"data\": {\n            \"links\": [ \"https://fileserver.com/ref1-uuid\" ]\n        },\n    }]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"type\": \" /share-media\",\n    \"created_time\": \"1547577721\",\n    \"lang\": \"en\",\n    \"body\": {\n        \"description\": \"free text describing the files that are about to be shared\",\n        \"items\": [\n            {\n                \"@id\": \"f88b7925-4cb4-4e32-b1d6-ac217c9fedbf\",\n                \"attachment_id\": \"item1\",\n                \"ciphering\": {\n                    \"algorithm\": \"aes-256-cbc\",\n                    \"parameters\" : {\n                        \"iv\": \"2f3849399c60cb04b923bd33265b81c7\",\n                        \"key\": \"233f8ce4ac6aa125927ccd98af5750d08c9c61d98a3f5d43cbf096b4caaebe80\"\n                    }\n                },\n                \"metadata\": { \"blurhash\": \"LGF5?xYk^6#M@-5c,1J5@[or[Q6.\" }\n            }\n            ... \n        ]\n    },\n    \"attachments\": [{\n                \"id\": \"item1\",\n                \"byte_count\": \"23894\",\n                \"media_type\": \"image/png\",\n                \"filename\": \"image1.png\",\n                \"description\": \"This particular image description\",\n                \"data\": {\n                    \"links\": [ \"https://fileserver.com/ref1-uuid\" ]\n                },\n            }\n            ... \n    ]\n}\n\nRequest Media\nThis message allows a recipient to ask for a previously shared media. This is mainly intended to be used in cases where the shared data is not available anymore in the third-party service used to store it originally.\nThe message may indicate the language used for the description. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.\nThe time the message is sent must be included. DIDComm V2 uses the created_time header. DIDComm V1 must include a sent_time as a message attribute containing the timestamp in ISO 8601 UTC format.\n\ndescription : (optional) human-readable string describing the request\nitem_ids : (required) array containing the ids of the requested items\n\nDIDComm v1 example:\n{\n    \"@id\": \"123456781\",\n    \"@type\": \" /request-media\",\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"description\": \"free text describing the media items that are requested\",\n    \"item_ids\": [ \"f88b7925-4cb4-4e32-b1d6-ac217c9fedbf\", \"8ba049e6-cc46-48fb-bfe0-463084d66324\" ]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456781\",\n    \"type\": \" /request-media\",\n    \"created_time\": \"1547577721\",\n    \"lang\": \"en\",\n    \"body\": {\n        \"description\": \"free text describing the media items that are requested\",\n        \"item_ids\": [ \"f88b7925-4cb4-4e32-b1d6-ac217c9fedbf\", \"8ba049e6-cc46-48fb-bfe0-463084d66324\" ]\n    }\n}\n\nImplementations\nCurrent implementations of this protocol are listed below:\n\nName / Link\nImplementation Notes\n\nAries JavaScript Media Sharing\nInitial implementation as an extension module for Aries Framework JavaScript. Used in 2060.io Mobile Agent and Service Agent.\n\nEndnotes\nFuture Considerations"},{"slug":"messagepickup/1.0/","title":"Message Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0212-pickup\nNote: as pointed in the abovementioned link, the version of this protocol is 1.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 3.0 version of this protocol that complies also with DIDComm v2 headers. Version 3.0 can be found here"},{"slug":"messagepickup/2.0/","title":"Message Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/2.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0685-pickup-v2\nNote: as pointed in the abovementioned link, the version of this protocol is 2.0 and was defined initially in Hyperledger Aries using DIDComm v1 headers/decorators. Readers should be aware that there’s a new 3.0 version of this protocol that complies also with DIDComm v2 headers. Version 3.0 can be found here"},{"slug":"messagepickup/3.0/","title":"Message Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/3.0","html":"Motivation\nMessages can be picked up simply by sending a message to the Mediator.\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that has messages waiting for pickup by the recipient.\nrecipient : The agent who is picking up messages from the mediator.\n\nRequirements\nThe return_route extension must be supported by both agents ( recipient and mediator).\nThe common use of this protocol is for the reply messages from the mediator to be synchronous, utilizing the same connection channel for the reply. In order to have this synchronous behavior the recipient should specify return_route header to all.\nThis header must be set each time the communication channel is established: once per established websocket, and every message for an HTTP POST.\nConnectivity\nThis protocol consists of three different message requests from the recipient that should be replied to by the mediator :\n\nStatus Request -> Status\nDelivery Request -> Message Delivery\nMessage Received -> Status\nLive Mode  -> Status or Problem Report\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requires the simple state of waiting for a response or to produce a response.\nAdditionally, the return_route header extension must be set to all in all request submitted by the recipient.\nBasic Walkthrough\nThe status-request message is sent by the recipient to the mediator to query how many messages are pending.\nThe status message is the response to status-request to communicate the state of the message queue.\nThe delivery-request message is sent by the recipient to request delivery of pending messages.\nThe message-delivery message is the response to the delivery-request to send queued messages back to the recipient.\nThe message-received message is sent by the recipient to confirm receipt of delivered messages, prompting the mediator to clear messages from the queue.\nThe live-delivery-change message is used to set the state of live_delivery.\nWhen Live Mode is enabled, messages that arrive when an existing connection exists are delivered over the connection immediately, rather than being pushed to the queue. See Live Mode below for more details.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nMessage Reference\nStatus Request\nSent by the recipient to the mediator to request a status message.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/status-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/status-request\",\n    \"body\" : {\n        \"recipient_did\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nrecipient_did is optional. When specified, the mediator MUST only return status related to that recipient did. This allows the recipient to discover if any messages are in the queue that were sent to a specific did.\nStatus\nStatus details about waiting messages.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/status\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/status\",\n    \"body\": {\n            \"recipient_did\": \"\",\n            \"message_count\": 7,\n            \"longest_waited_seconds\": 3600,\n            \"newest_received_time\": 1658085169,\n            \"oldest_received_time\": 1658084293,\n            \"total_bytes\": 8096,\n            \"live_delivery\": false\n    }\n}\n\nmessage_count is the only REQUIRED attribute. The others MAY be present if offered by the mediator.\nlongest_waited_seconds is in seconds, and is the longest delay of any message in the queue.\nnewest_received_time and oldest_received_time are expressed in UTC Epoch Seconds (seconds since 1970-01-01T00:00:00Z) as an integer.\ntotal_bytes represents the total size of all messages.\nIf a recipient_did was specified in the status-request message, the matching value MUST be specified in the recipient_did attribute of the status message.\nlive_delivery state is also indicated in the status message.\nNote : due to the potential for confusing what the actual state of the message queue is, a status message MUST NOT be put on the pending message queue and MUST only be sent when the recipient is actively connected (HTTP request awaiting response, WebSocket, etc.).\nDelivery Request\nA request from the recipient to the mediator to have pending messages delivered.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/delivery-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/delivery-request\",\n    \"body\": {\n        \"limit\": 10,\n        \"recipient_did\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nlimit is a REQUIRED attribute, and after receipt of this message, the mediator SHOULD deliver up to the limit indicated.\nrecipient_did is optional. When specified, the mediator MUST only return messages sent to that recipient did.\nIf no messages are available to be sent, a status message MUST be sent immediately.\nDelivered messages MUST NOT be deleted until delivery is acknowledged by a messages-received message.\nMessage Delivery\nBatch of messages delivered to the recipient as attachments.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/delivery\n{\n    \"id\": \"123456780\",\n    \"thid\": \"\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/delivery\",\n    \"body\": {\n        \"recipient_did\": \"\"\n    },\n    \"attachments\": [{\n        \"id\": \"\",\n        \"data\": {\n            \"base64\": \"\"\n        }\n    }]\n}\n\nMessages delivered from the queue must be delivered in a batch delivery message as attachments, with a batch size specified by the limit provided in the delivery-request message.\nThe id of each attachment is used to confirm receipt.\nThe id is an opaque value, and the recipient should not deduce any information from it, except that it is unique to the mediator. The recipient can use the id s in the message_id_list field of messages-received.\nThe ONLY valid type of attachment for this message is a DIDComm v2 Message in encrypted form.\nThe recipient_did attribute is only included when responding to a delivery-request message that indicates a recipient_did.\nMessages Received\nAfter receiving messages, the recipient sends an acknowledge message indiciating which messages are safe to clear from the queue.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/messages-received\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/messages-received\",\n    \"body\": {\n        \"message_id_list\": [\"123\",\"456\"]\n    },\n    \"return_route\": \"all\"\n}\n\nmessage_id_list is a list of ids of each message received. The id of each message is present in the attachment descriptor of each attached message of a delivery message.\nUpon receipt of this message, the mediator knows which messages have been received, and can remove them from the collection of queued messages with confidence. The mediator SHOULD send an updated status message reflecting the changes to the queue.\nMultiple Recipients\nIf a message arrives at a mediator addressed to multiple recipients, the message MUST be queued for each recipient independently. If one of the addressed recipients retrieves a message and indicates it has been received, that message MUST still be held and then removed by the other addressed recipients.\nLive Mode\nLive Mode is the practice of delivering newly arriving messages directly to a connected recipient. It is disabled by default and only activated by the recipient. Messages that arrive when Live Mode is off MUST be stored in the queue for retrieval as described above. If Live Mode is active, and the connection is broken, a new inbound connection starts with Live Mode disabled.\nMessages already in the queue are not affected by Live Mode; they must still be requested with delivery-request messages.\nLive Mode MUST only be enabled when a persistent transport is used, such as WebSockets.\nRecipients have three modes of possible operation for message delivery with various abilities and level of development complexity:\n\nNever activate Live Mode. Poll for new messages with a status_request message, and retrieve them when available.\nRetrieve all messages from queue, and then activate Live Mode. This simplifies message processing logic in the recipient.\nActivate Live Mode immediately upon connecting to the mediator. Retrieve messages from the queue as possible. When receiving a message delivered live, the queue may be queried for any waiting messages delivered to the same did for processing.\n\nLive Mode Change\nLive Mode is changed with a live-delivery-change message.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/live-delivery-change\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/live-delivery-change\",\n    \"body\": {\n        \"live_delivery\": true\n    }\n}\n\nUpon receiving the live_delivery_change message, the mediator * MUST respond with a status message.\nIf sent with live_delivery set to true on a connection incapable of live delivery, a problem_report SHOULD be sent as follows:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/report-problem/2.0/problem-report\",\n    \"pthid\": \"< the value is the thid of the thread in which the problem occurred>\",\n    \"body\": {\n        \"code\": \"e.m.live-mode-not-supported\",\n        \"comment\": \"Connection does not support Live Delivery\"\n    }\n}\n\nL10n\nNo localization is required.\nImplementations\nRootsID DIDComm v2 Mediator\nEndnotes"},{"slug":"messagepickup/4.0/","title":"Message Pickup","tags":[],"license":"MIT","publisher":"JamesKEbert","avatar":"https://avatars.githubusercontent.com/u/30242284?v=4&s=48","version":"4.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/message-pickup/4.0","html":"Summary\nA protocol to facilitate a Recipient agent picking up messages held at a Mediator. This protocol is likely to be used in tandem with the Cooridinate Mediation protocol.\nMotivation\nThis protocol is needed to facilitate retrieval of messages from a mediator in an explicit manner. Additionally, this protocol provides behavior for initiating live delivery of messages, which is crucial for good user experience for agents operating on mobile devices.\nMotivation for v4 of this protocol primarily stems from ambiguity in the pickup v2 protocol and messagepickup v3 protocol as to whether delivery and messages-received messages must be used while using live mode.\nVersion Change Log\n4.0\n\nClarifies that delivery and messages-received messages MUST be used while using Live Mode to ensure delivery of all messages.\nAdjusts handling of delivery-request messages when no messages are queued to be delivered. Rather than sending a status message indicating no messages are queued, an empty delivery message is sent. This was chosen to reduce complexity of the protocol.\nAdds DIDComm v1 message format (pickup v3 only contained DIDComm v2).\n\nIn pickup v4 while using DIDComm v1, every recipient_did must be a did:key reference.\n\nAdjustments to the protocol's use of thread ids\n\nAdded thread id to status messages, as status messages are always in response to an original message from the recipient.\nMade the thread id (thid) on delivery messages optional, as messages received in Live Mode do not have an associated delivery-request message.\n\nRemoved return route all from messages-received messages, as it is not required.\nUpdates protocol-name to message-pickup.\nRemoves the longest_waited_seconds field on the status message (as it is redundant in regards to oldest_received_time).\nRenames limit in the delivery-request to message_count_limit for increased specificity.\nAdjusts timing fields to be specified in UTC Epoch milliseconds instead of seconds for greater precision.\n\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that has messages waiting for pickup by the recipient.\nrecipient : The agent who is picking up messages from the mediator.\n\nRequirements\nReturn Route\nThe return_route extension must be supported by both agents ( recipient and mediator).\nThe common use of this protocol is for the reply messages from the mediator to be synchronous, utilizing the same connection channel for the reply. In order to have this synchronous behavior the recipient should specify return_route header to all.\nThis header must be set each time the communication channel is established: once per established websocket, and every message for an HTTP POST.\nDIDComm V1 Requirements\nWhen using this protocol with DIDComm V1, recipient_did MUST be a did:key reference.\nBasic Walkthrough\nThis protocol consists of three different message requests from the recipient that should be replied to by the mediator :\n\nStatus Request -> Status\nDelivery Request -> Message Delivery -> Message Received\nLive Mode -> Status or Problem Report -> Message Delivery -> Message Received\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requires the simple state of waiting for a response or to produce a response.\nAdditionally, the return_route header extension must be set to all in all request submitted by the recipient.\nBasic Walkthrough\nThe status-request message is sent by the recipient to the mediator to query how many messages are pending.\nThe status message is the response to status-request to communicate the state of the message queue.\nThe delivery-request message is sent by the recipient to request delivery of pending messages.\nThe delivery message is the response to the delivery-request to send queued messages back to the recipient.\nThe messages-received message is sent by the recipient to confirm receipt of delivered messages, prompting the mediator to clear messages from the queue.\nThe live-delivery-change message is used to set the state of live_delivery.\nWhen Live Mode is enabled, messages that arrive when an existing connection exists are delivered over the connection immediately, via a delivery message, rather than being pushed to the queue. See Live Mode below for more details.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nMessage Reference\nStatus Request\nSent by the recipient to the mediator to request a status message.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/status-request\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/status-request\",\n    \"recipient_did\": \"\",\n    \"~transport\": {\n        \"return_route\": \"all\"\n    }\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/status-request\",\n    \"body\" : {\n        \"recipient_did\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nrecipient_did is optional. When specified, the mediator MUST only return status related to that recipient did. This allows the recipient to discover if any messages are in the queue that were sent to a specific DID. If using DIDComm v1, recipient_did MUST be a did:key reference.\nStatus\nStatus details about waiting messages.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/status\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/status\",\n    \"~thread\": {\n        \"thid\": \"\"\n    },\n    \"recipient_did\": \"\",\n    \"message_count\": 7,\n    \"newest_received_time\": 1739420343823,\n    \"oldest_received_time\": 1739420343823,\n    \"total_bytes\": 8096,\n    \"live_delivery\": false\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"thid\": \"\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/status\",\n    \"body\": {\n        \"recipient_did\": \"\",\n        \"message_count\": 7,\n        \"newest_received_time\": 1739420343823,\n        \"oldest_received_time\": 1739420343823,\n        \"total_bytes\": 8096,\n        \"live_delivery\": false\n    }\n}\n\nmessage_count is the only REQUIRED attribute. The others MAY be present if offered by the mediator.\nnewest_received_time and oldest_received_time are expressed in UTC Epoch Milliseconds (Milliseconds since 1970-01-01T00:00:00Z) as an integer.\ntotal_bytes represents the total size of all messages.\nIf a recipient_did was specified in the status-request message, the matching value MUST be specified in the recipient_did attribute of the status message.\nlive_delivery state is also indicated in the status message.\nNote : due to the potential for confusing what the actual state of the message queue is, a status message MUST NOT be put on the pending message queue and MUST only be sent when the recipient is actively connected (HTTP request awaiting response, WebSocket, etc.).\nDelivery Request\nA request from the recipient to the mediator to have pending messages delivered.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/delivery-request\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/delivery-request\",\n    \"message_count_limit\": 10,\n    \"recipient_did\": \"\",\n    \"~transport\": {\n        \"return_route\": \"all\"\n    }\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/delivery-request\",\n    \"body\": {\n        \"message_count_limit\": 10,\n        \"recipient_did\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nmessage_count_limit is a REQUIRED attribute, and after receipt of this message, the mediator SHOULD deliver up to the limit indicated.\nrecipient_did is optional. When specified, the mediator MUST only return messages sent to that recipient did.\nIf no messages are available to be sent, a delivery message with an empty attachments array MUST be sent immediately.\nDelivered messages MUST NOT be deleted until delivery is acknowledged by a messages-received message.\nMessage Delivery\nBatch of messages delivered to the recipient as attachments.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/delivery\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/delivery\",\n    \"~thread\": {\n        \"thid\": \"\"\n    },\n    \"recipient_did\": \"\",\n    \"~attach\": [{\n        \"@id\": \"\",\n        \"data\": {\n            \"base64\": \"\"\n        }\n    }]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"thid\": \"\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/delivery\",\n    \"body\": {\n        \"recipient_did\": \"\"\n    },\n    \"attachments\": [{\n        \"id\": \"\",\n        \"data\": {\n            \"base64\": \"\"\n        }\n    }]\n}\n\nMessages delivered from the queue MUST be delivered in a delivery message as attachments. If the delivery message is in response to a delivery-request message that specifies a message_count_limit, the number of attached messages MUST NOT exceed the message_count_limit specified in the delivery-request.\nThe id of each attachment is used to confirm receipt.\nThe id is an opaque value, and the recipient SHOULD NOT deduce any information from it, except that it is unique to the mediator. The recipient can use the id s in the message_id_list field of messages-received.\nIf there are no messages in the queue for the delivery-request, the delivery message MUST contain an empty array of attachments.\nThe ONLY valid type of attachment for this message is a DIDComm v1 or v2 Message in encrypted form.\nthid -- an optional field if the delivery message is in response to a singular delivery-request messsage.\nThe recipient_did attribute is only included when responding to a delivery-request message that indicates a recipient_did.\nMessages Received\nAfter receiving messages, the recipient MUST send an acknowledge message indiciating which messages are safe to clear from the queue.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/messages-received\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/messages-received\",\n    \"message_id_list\": [\"123\",\"456\"]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/messages-received\",\n    \"body\": {\n        \"message_id_list\": [\"123\",\"456\"]\n    }\n}\n\nmessage_id_list is a list of ids of each message received. The id of each message is present in the attachment descriptor of each attached message of a delivery message.\nUpon receipt of this message, the mediator knows which messages have been received, and can remove them from the collection of queued messages with confidence.\nMultiple Recipients\nIf a message arrives at a mediator addressed to multiple recipients, the message MUST be queued for each recipient independently. If one of the addressed recipients retrieves a message and indicates it has been received, that message MUST still be held and then removed by the other addressed recipients.\nLive Mode\nLive Mode is the practice of delivering newly arriving messages directly to a connected recipient. It is disabled by default and only activated by the recipient. Messages that arrive when Live Mode is off MUST be stored in the queue for retrieval as described above. If Live Mode is active, and the connection is broken, a new inbound connection starts with Live Mode disabled.\nMessages already in the queue are not affected by Live Mode; they MUST still be requested with delivery-request messages.\nLive Mode MUST only be enabled when a persistent transport is used, such as WebSockets.\nIf Live Mode is active, messages still MUST be delivered via a delivery message and the recipient MUST send an acknowledgement message messages-received. If a message is not acknowledged, the message MUST be added to the queue for later pickup.\nRecipients have three modes of possible operation for message delivery with various abilities and level of development complexity:\n\nNever activate Live Mode. Poll for new messages with a status_request message, and retrieve them when available.\nRetrieve all messages from queue, and then activate Live Mode. This simplifies message processing logic in the recipient.\nActivate Live Mode immediately upon connecting to the mediator. Retrieve messages from the queue as possible. When receiving a message delivered live, the queue may be queried for any waiting messages delivered to the same did for processing.\n\nLive Mode Change\nLive Mode is changed with a live-delivery-change message.\nMessage Type URI: https://didcomm.org/message-pickup/4.0/live-delivery-change\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/live-delivery-change\",\n    \"live_delivery\": true\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/live-delivery-change\",\n    \"body\": {\n        \"live_delivery\": true\n    }\n}\n\nUpon receiving the live_delivery_change message, the mediator MUST respond with a status message.\nIf sent with live_delivery set to true on a connection incapable of live delivery, a problem_report SHOULD be sent as follows:\nDIDComm v1 example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/message-pickup/4.0/problem-report\",\n    \"~thread\": {\n        \"pthid\": \"\"\n    },\n    \"description\": {\n        \"code\": \"e.m.live-mode-not-supported\",\n        \"en\": \"Connection does not support Live Delivery\"\n    }\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/message-pickup/4.0/problem-report\",\n    \"pthid\": \"\",\n    \"body\": {\n        \"code\": \"e.m.live-mode-not-supported\",\n        \"comment\": \"Connection does not support Live Delivery\"\n    }\n}\n\nL10n\nNo localization is required.\nImplementations\n\nName / Link\nImplementation Notes\n\nEndnotes\nFuture Considerations\nThe style of wrapping messages in a delivery message incurs an additional roughly 33% increased message size due to wrapping of the message. This size bloating is outweighed by the benefit of having explicit and guaranteed delivery of messages. This issue may be resolved in future versions of DIDComm.\nShould there be a strategy for a mediator to indicate support for Live Mode via discover features?"},{"slug":"out-of-band/2.0/","title":"Out Of Band","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Out Of Band protocol defined in the DIDComm Messaging Spec. This enables encoding of messages within QR code and URLs","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/out-of-band/2.0","html":"Details\nThis Protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#out-of-band-messages"},{"slug":"present-proof/1.0/","title":"Present Proof","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol supporting a general purpose verifiable presentation exchange regardless of the specifics of the underlying verifiable presentation request and verifiable presentation format.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/present-proof/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof"},{"slug":"present-proof/2.0/","title":"Present Proof","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol supporting a general purpose verifiable presentation exchange regardless of the specifics of the underlying verifiable presentation request and verifiable presentation format.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/present-proof/2.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0454-present-proof-v2"},{"slug":"present-proof/3.0/","title":"Present Proof","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Draft","summary":"A protocol supporting a general purpose verifiable presentation exchange regardless of the specifics of the underlying verifiable presentation request and verifiable presentation format.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/present-proof/3.0","html":"Details\nThis protocol is proposed here: https://github.com/decentralized-identity/waci-didcomm/blob/main/present_proof/present-proof-v3.md\nIt is part of WACI-DIDComm Interop Profile v1.0, colloqually known as WACI PEx, a DIDComm v2 profile for supporting the Wallet and Credential Interaction (WACI) Protocols for both Issuance and Presentation Exchange. It is defined here: https://identity.foundation/waci-didcomm/v1.0/"},{"slug":"question-answer/1.0/","title":"Question Answer","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A simple protocol where a questioner asks a responder a question with at least one valid answer. The responder then replies with an answer or ignores the question.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/questionanswer/1.0","html":"Details\nThis protocol was first defined at https://github.com/hyperledger/aries-rfcs/tree/main/features/0113-question-answer, and now adapted here with examples with DIDComm headers.\nSummary\nA simple protocol where a questioner asks a responder a question with at least one valid answer. The responder then replies with an answer or ignores the question.\n\nNote: While there is a need in the future for a robust negotiation protocol\n\nthis is not it. This is for simple question/answer exchanges.\nMotivation\nThere are many instances where one party needs an answer to a specific question from another party. These can be related to consent, proof of identity, authentication, or choosing from a list of options. For example, when receiving a phone call a customer service representative can ask a question to the customer’s phone to authenticate the caller, “Are you on the phone with our representative?”. The same could be done to authorize transactions, validate logins (2FA), accept terms and conditions, and any other simple, non-negotiable exchanges.\nInteraction\nWe'll describe this protocol in terms of a Challenge/Response scenario where a customer service representative for Faber Bank questions its customer Alice, who is speaking with them on the phone, to answer whether it is really her.\nUsing an already established pairwise connection and agent-to-agent communication Faber will send a question to Alice with one or more valid responses with an optional deadline and Alice can select one of the valid responses or ignore the question. If she selects one of the valid responses she will respond with her answer.\nRoles\nThere are two parties in a typical question/answer interaction. The first party, questioner, issues the question with its valid answers and the second party, responder, responds with the selected answer. The parties must have already exchanged pairwise keys and created a connection. These pairwise can be used to encrypt and verify the response. When the answer has been sent questioner can know with a high level of certainty that it was sent by responder.\nIn this tutorial Faber (the questioner) initiates the interaction and creates and sends the question to Alice. The question includes the valid responses, which can optionally be signed for non-repudiability.\nIn this tutorial Alice (the responder) receives the packet and must respond to the question (or ignore it, which is not an answer) by encrypting either the positive or the negative response_code (signing both is invalid).\nMessage Reference\nQuestion\nThe protocol begins when the questioner sends a question message to the responder:\nDIDComm V1 Example:\n{\n  \"@type\": \"https://didcomm.org/questionanswer/1.0/question\",\n  \"@id\": \"518be002-de8e-456e-b3d5-8fe472477a86\",\n  \"question_text\": \"Alice, are you on the phone with Bob from Faber Bank right now?\",\n  \"question_detail\": \"This is optional fine-print giving context to the question and its various answers.\",\n  \"nonce\": \"\",\n  \"signature_required\": true,\n  \"valid_responses\" : [\n    {\"text\": \"Yes, it's me\"},\n    {\"text\": \"No, that's not me!\"}],\n  \"~timing\": {\n    \"expires_time\": \"2018-12-13T17:29:06+0000\"\n  }\n}\n\nDIDComm V2 Example:\n{\n  \"type\": \"https://didcomm.org/questionanswer/1.0/question\",\n  \"id\": \"518be002-de8e-456e-b3d5-8fe472477a86\",\n  \"body\": {\n        \"question_text\": \"Alice, are you on the phone with Bob from Faber Bank right now?\",\n        \"question_detail\": \"This is optional fine-print giving context to the question and its various answers.\",\n        \"nonce\": \"\",\n        \"signature_required\": true,\n        \"valid_responses\" : [\n            {\"text\": \"Yes, it's me\"},\n            {\"text\": \"No, that's not me!\"}\n        ],\n        \"expires_time\": 1544722146\n  }\n}\n\nquestion_detail is optional. It can be used to give \"fine print\"-like context around the question and all of its valid responses. While this could always be displayed, some UIs may choose to only make it available on-demand, in a \"More info...\" kind of way.\nexpires_time is optional\n\nAnswer\nThe responder receives this message and chooses the answer. If the signature is required then she uses her private pairwise key to sign her response.\n\nNote: Alice should sign the following: the question, the chosen answer,\n\nand the nonce: HASH( + +), this keeps a\nrecord of each part of the transaction.\nDIDComm V1 Example:\n{\n  \"@type\": \"https://didcomm.org/questionanswer/1.0/answer\",\n  \"~thread\": { \"thid\": \"518be002-de8e-456e-b3d5-8fe472477a86\", \"seqnum\": 0 },\n  \"response\": \"Yes, it's me\",\n  \"response~sig\": {\n    \"@type\": \"https://didcomm.org/signature/1.0/ed25519Sha512_single\"\n    \"signature\": \"\",\n    \"sig_data\": \" \"))>\",\n    \"signers\": [\"\"],\n    }\n  \"~timing\": {\n    \"out_time\": \"2018-12-13T17:29:34+0000\"\n  }\n}\n\nDIDComm V2 Example:\n{\n    \"type\": \"https://didcomm.org/questionanswer/1.0/answer\",\n    \"id\": \"5b6ae361-d4d0-4ca7-b7d7-cdfafc2ebc1d\"\n    \"thid\": \"518be002-de8e-456e-b3d5-8fe472477a86\",\n    \"created_time\": 1544722103,\n    \"body\": {\n        \"response\": \"Yes, it's me\",\n        \"response_sig\": {\n            \"type\": \"https://didcomm.org/signature/1.0/ed25519Sha512_single\"\n            \"signature\": \"\",\n            \"sig_data\": \" \"))>\",\n            \"signers\": [\"\"],\n        }\n    }\n}\n\nresponse_sig is optional when signature_required is false\nThe questioner then checks the signature against the sig_data.\nBusiness cases and auditing\nIn the above scenario, Faber bank can audit the reply and prove that only Alice's pairwise key signed the response (a cryptographic API like Indy-SDK can be used to guarantee the responder's signature). Conversely, Alice can also use her key to prove or dispute the validity of the signature. The cryptographic guarantees central to agent-to-agent communication and digital signatures create a trustworthy protocol for obtaining a committed answer from a pairwise connection. This protocol can be used for approving wire transfers, accepting EULAs, or even selecting an item from a food menu. Of course, as with a real world signature, Alice should be careful about what she signs.\nInvalid replies\nThe responder may send an invalid, incomplete, or unsigned response. In this case the questioner must decide what to do. As with normal verbal communication, if the response is not understood the question can be asked again, maybe with increased emphasis. Or the questioner may determine the lack of a valid response is a response in and of itself. This depends on the parties involved and the question being asked. For example, in the exchange above, if the question times out or the answer is not \"Yes, it's me\" then Faber would probably choose to discontinue the phone call.\nTrust and Constraints\nUsing already established pairwise relationships allows each side to trust each other. The responder can know who sent the message and the questioner knows that only the responder could have encrypted the response. This response gives a high level of trust to the exchange.\nImplementations\n\nName / Link\nDIDComm version\nImplementation Notes\n\nConnect.Me\nv1\nFree mobile app from Evernym. Installed via app store on iOS and Android.\n\nVerity\nv1\nCommercially licensed enterprise agent, SaaS or on-prem."},{"slug":"receipts/1.0/","title":"Receipts","tags":[],"license":"MIT","publisher":"genaris","avatar":"https://avatars.githubusercontent.com/u/4800462?v=4&s=48","version":"1.0","status":"Demonstrated","summary":"A protocol to allow a recipient to provide information about the processing of a message to the sender, letting it to keep track of its state.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/receipts/1.0","html":"Summary\nA protocol to allow a recipient to provide information about the processing of a message to the sender, letting it to keep track of its state.\nThis protocol is intended to be used as a complement of any existing DIDComm protocol where it could be relevant to know whether the final user has seen or taken an specific action for a given message.\nMotivation\nAlthough not a feature required or even desired by some users, all modern chat applications that can be seen nowadays include some sort of read receipts, useful for users to get feedback about the other party to have received or seen messages they have sent to them. Therefore, by defining a standard procedure for agents to set up their requirements on receipts of a particular, a set or all messages sent to a party, it is possible to build rich chat applications on top of DIDComm.\nThe scope of this protocol is not limited to particular types of messages, so it is meant to be used as a complement to any other protocol where receipts are applicable or meaningful.\nRoles\nThere are two roles in this protocol:\n\nrequester - The agent requesting receipts for messages it sends\nresponder - The agent that receives messages and sends back receipts depending on user actions\n\nBasic Walkthrough\nThe protocol has two phases: setup and execution.\nSetup phase\nIn order for an agent to receive receipts from another one, it must express their will. This can be simply achieved by sending the generic and explicit Request Receipts message, where it defines which kind of messages it wants to receive receipts for.\nIt is enough to send this message only once through the lifecycle of a DIDComm connection, unless the requester agent wants to change the paramaters.\nAnother way of expressing the desire of receiving receipts can be the usage of an specific decorator for each sent message that requires so.\n\nTODO : Define decorator/DIDComm extension for receipts for individual messages\n\nExecution phase\nThis phase is where agents usually spend most of the time. It consists on a single message where the responder sends a single or multiple receipts, corresponding to messages previously sent by the requester.\nThere might be more than a receipt per message. Agent receiving them must order them by their timestamp.\n\nMessage States\nBased on modern chat applications, the following states are defined as a minimal set for this protocol to be meaningful:\n\nreceived : recipient agent has processed the message and made it available to see by the user\nviewed : user on recipient end has seen the message (or the outcomes from it). It must have necessarily passed by the received state\ndeleted : user on recipient end has explicitly selected to delete the message. It must have necessarily passed by the received state\n\nMessage Reference\nThis section explains the structure of the different messages defined for this protocol.\nRequest Receipts\nThis message is used for a party to indicate to another one which message receipts they are insterested to receive, based on the message types.\nDescription of the fields:\n\nrequested_receipts : Array containing all the relevant message types and supported states for each. Items are objects with the following fields:\n\nmessage_type : Full URI for the message type. It's possible to use wildcards, i.e. for requesting receipts for every message of a particular protocol\nstates : Optional list of interested states for this type. If not set, recipient agent will send receipts for any state\n\nIf an agent wants to change its receipts preference, it must send this message again containing the new array.\nTo entirely disable receipts, requested_receipts must be an empty array\nNote :\n\nNot every type of message is applicable for receipts. For instance, Message Receipts message, as doing so would result in an infinite loop of receipts.\n\nDIDComm v1 example:\n{\n    \"@id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"@type\": \" /request-receipts\",\n    \"requested_receipts\": [\n        {\n            \"message_type\": \"https:// /protocol/1.0/message\",\n            \"states\": [\"received\", \"viewed\"]\n        },\n        {\n            \"message_type\": \"https:// /protocol/1.0/*\",\n            \"states\": [\"received\", \"viewed\", \"deleted\"]\n        },        \n        ...\n    ]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"type\": \" /request-receipts\",\n    \"body\": {\n        \"requested_receipts\": [\n        {\n            \"message_type\": \"https:// /protocol/1.0/message\",\n            \"states\": [\"received\", \"viewed\"]\n        },\n        {\n            \"message_type\": \"https:// /protocol/1.0/*\",\n            \"states\": [\"received\", \"viewed\", \"deleted\"]\n        },        \n        ...\n    ]},\n}\n\nMessage Receipts\nThrough this message, an arbitrary number of Messsage Receipts can be transmitted.\nDescription of the fields:\n\nreceipts : Array containing receipt entries. Items are objects with the following fields:\n\nmessage_id : originating message id\nstate : message state\ntimestamp : time when the message state has been changed. Expressed in UTC Epoch seconds\n\nDIDComm v1 example:\n{\n    \"@id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"@type\": \" /message-receipts\",\n    \"receipts\": [ \n        {\n            \"message_id\": \"3c68cad6-00bd-496d-8cc6-4a188cb086b0\",\n            \"state\": \"viewed\",\n            \"timestamp\": \"1687215606\",\n        },\n        {\n            \"message_id\": \"7f960bac-42f4-4a95-9997-752f2e0ed65d\",\n            \"state\": \"received\",\n            \"timestamp\": \"1687215606\",\n        },        \n        ...\n     ]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"type\": \" /message-receipts\",\n    \"body\": {\n    \"receipts\": [ \n        {\n            \"message_id\": \"3c68cad6-00bd-496d-8cc6-4a188cb086b0\",\n            \"state\": \"viewed\",\n            \"timestamp\": \"1687215606\",\n        },\n        {\n            \"message_id\": \"7f960bac-42f4-4a95-9997-752f2e0ed65d\",\n            \"state\": \"received\",\n            \"timestamp\": \"1687215606\",\n        },        \n        ...\n     ]\n    }\n}\n\nImplementations\nCurrent implementations of this protocol are listed below:\n\nName / Link\nImplementation Notes\n\nAries JavaScript Receipts\nInitial implementation as an extension module for Aries Framework JavaScript. Used in 2060.io Mobile Agent and Service Agent.\n\nEndnotes\nFuture Considerations"},{"slug":"report-problem/2.0/","title":"Report Problem","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Report Problem protocol is defined in the DIDComm Messaging Spec. This protocol describes sending a problem report to another party.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/report-problem/2.0","html":"Details\nThis Spec is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#problem-reports"},{"slug":"routing/2.0/","title":"Routing","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The routing protocol defined in the DIDComm Messaging Spec. This enables the message sender to package the final message on a route shared by the message recipient.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/routing/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#routing-protocol"},{"slug":"shorten-url/1.0/","title":"Shorten URL","tags":[],"license":"MIT","publisher":"TimoGlastra","avatar":"https://avatars.githubusercontent.com/u/23165168?v=4&s=48","version":"1.0","status":"Proposed","summary":"A protocol to request a shortened URL for a given URL. For example, an agent requesting a shortened out of band invitation url from a mediator.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/shorten-url/1.0","html":"Summary\nA protocol to request a shortened URL for a given URL. For example, an agent requesting a shortened out of band invitation url from a mediator.\nMotivation\nURL shorteners are common technology used by a variety of services. There's a lot of free to use url shorteners available, but those bring in privacy concerns and don't always support invalidating the URL. When an agent can't host shortened url themselves (e.g. in the case of a mobile edge agent), having another agent host the shortened url provides a good solution to dynamically shorten the url. This would allow agents to create QR codes of invitations that are easy to scan in size, and also allows to share the shortened with other agents out of band\n\nNote: Some platforms such as iOS remove the query from an url when you click on it if the query is too long. This is problematic for out of band invitations that rely on the oob property to be present\nin the invitation url.\nE.g. in the case of the following url: https://my-url.com?oob=1234 (example, real oob= param would need to be much longer), the url when clicked on will be interpreted as https://my-url.com.\n\nRoles\nThere are two roles in this protocol:\n\nurl-shortener : The url-shortener is an agent who will provide the long-url-provider with a shortened url.\nlong-url-provider : The long-url-provider can then share this shortened link. The url-shortener will return the long url when the short url is fetched.\n\nBasic Walkthrough\nThe Shorten URL protocol allows one agent to request a shortened variant of an url from another agent. One agent behaves as the url-shortener whilst the other agent represents the long-url-provider.\nThe protocol can be initiated by the long-url-provider sending a request-shortened-url message to the url-shortener. The url-shortener will then respond with a shorten-url-response message containing the shortened url. If the long-url-provider wants to invalidate the shortened url, it can send a invalidate-shortened-url message to the url-shortener.\nStates\nStates for URL Shortener\n\nState\nDescription\n\nnull\nNo url has bene requested\n\nrequest-received\nrequest-shortened-url message has been received.\n\nshortened-url-sent\nshortened-url message has been sent.\n\ninvalidate-received\ninvalidate-shortened-url message has been received.\n\ninvalidated\nThe shortened url has been invalidated, either through expiry, or throug the invalidate-shortened-url message.\n\nStates for Long URL Provider\n\nState\nDescription\n\nnull\nNo url has has been requested\n\nrequest-sent\nrequest-shortened-url message has been sent and awaiting a shortened-url message.\n\nshortened-url-received\nshortened-url message has been received.\n\ninvalidate-sent\ninvalidate-shortened-url message has been sent\n\ninvalidated\nThe shortened url has been invalidated, either through expiry, or throug the invalidate-shortened-url message.\n\nDesign By Contract\n\nError Code\nNotes\n\nvalidity_too_long\nSent by the url-shortener in response to a request-shortened-url message. The requested_validity_seconds is too long for the url-shortener. The long-url-provider should again with a lower requested_validity_seconds value. If the requested_validity_seconds in the shorten-url-request message was 0, it means the url-shortener does not allow urls to be valid indefinitely. The url-shortener SHOULD add a problem_items entry to the problem report indicating the maximum validity a long-url-provider can request for a shortened url: [{ \"max_validity_seconds\": }]\n\ninvalid_url\nSent by the url-shortener in response to a request-shortened-url message. The provided url is not a valid url. The long-url-provider should retry with a valid url.\n\ninvalid_protocol_scheme\nSent by the url-shortener in response to a request-shortened-url message. The provided url uses an invalid protocol scheme (e.g. wss). This can either mean the url-shortener does not support shortening this specific scheme, or that the scheme does not support url shortening.\n\ninvalid_goal_code\nSent by the url-shortener in response to a request-shortened-url message. The goal code is not a valid goal code as defined by this RFC, or the goal code is not supported by the url-shortener. Either way, the long-url-provider should use another goal code, or abort the request for a shortened url.\n\nslugs_not_supported\nSent by the url-shortener in response to a request-shortened-url message. The url-shortener does not support the short_url_slug property.\n\ninvalid_slug\nSent by the url-shortener in response to a request-shortened-url message. The provided short_url_slug is invalid. The url-shortener SHOULD include the reason why the slug is invalida in the problem report.\n\nshort_url_invalid\nSent by the url-shortener in response to an invalidate-shortened-url message. The shortened_url is invalid. This could be for a number of reasons, but most probably (a) the url is already expired, (b) the url is already invalidated, or (c) the url does not exist. The exact reason doesn't matter, as the end result is the same.\n\nrejected_invalidation\nSent by the url-shortener in response to an invalidate-shortened-url message. The url-shortener refuses to invalidate the shortened url. A reason for this could be that the long-url-provider is not authorized to invalidate the shortened url. The associated description should be very clear and hint towards what the long-url-provider can do to resolve the issue. This prlblem report should not be used if short_url_invalid can be used instead.\n\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\nshorten\nShorten an URL according to the Standard URL Shortening as described in this RFC. This is meant to be used as a generic url shortener. If you want to shorten out of band invitations, the shortend.oobv1 and shorten.oobv2 goal codes should be used. See Standard URL Shortening for shortening algorithm.\n\nshorten.oobv1\nShorten an URL according to the URL shortening rules as defined in the Out of Band V1 Protocol. This means the URL shortener MUST adhere to the url shortener rules as defined in this protocol. When this goal code is used, the url property in the message MUST include the oob property. If shortening an out of band invitation is desired, but doesn't need to follow the shortening rules as defined in the out of band v1 protocol the more generic shorten goal code can be used. See RFC 0434: Out-of-Band Protocol 1.x for shortening algorithm.\n\nshorten.oobv2\nShorten an URL according to the URL shortening rules as defined in the Out of Band V2 Protocol from the DIDComm V2 specification. This means the URL shortener MUST adhere to the url shortener rules as defined in this protocol. When this goal code is used, the url property in the request message MUST include the _oob property and the shortened_url property in the response message MUST include the _oobid property. If shortening an out of band invitation is desired, but doesn't need to follow the shortening rules as defined in the out of band v2 protocol the more generic shorten goal code can be used. See Out of Band V2 Protocol for shortening algorithm.\n\nMessage Reference\nRequest Shortened URL\nMessage sent by the long-url-provider to the url-shortener to request a shortened version of an url.\nDIDComm v1 Example:\n{\n  \"@type\": \"https://didcomm.org/shorten-url/1.0/request-shortened-url\",\n  \"@id\": \"\",\n  \"url\": \"\",\n  \"requested_validity_seconds\":,\n  \"goal_code\": \"\",\n  \"short_url_slug\": \"\"\n}\n\nDIDComm v2 Example:\n{\n  \"type\": \"https://didcomm.org/shorten-url/1.0/request-shortened-url\",\n  \"id\": \"\",\n  \"body\": {\n    \"url\": \"\",\n    \"requested_validity_seconds\":,\n    \"goal_code\": \"\",\n    \"short_url_slug\": \"\"\n  }\n}\n\nDescription of the fields:\n\nurl -- (required) The url that should be shortened\nrequested_validity_seconds -- (required) The time in seconds that the shortened url should be valid. If not provided, the url-shortener determines the validity time. The value can be set to 0 to request the shortened url to be valid indefinitely (or until the url is invalidated using the invalidate-shortened-url message).\ngoal_code -- (required) A goal code that can be used to identify the purpose of the shortened url. See Composition for supported goal codes.\nshort_url_slug : (optional) A string that can be used to specify the slug of the shortened url. For example if the url-shortener uses the domain https://short-url.aries and the short_url_slug value is oob-invite-28 then the shortened url could result in https://short-url.aries/oob-invite-28. The url-shortener can use custom paths or link formats, this protocol doesn't describe how the short_url_slug should be integrated into the url. If the url-shortener can't or won't include the slug into the shortened url, it should notify the long-url-provider of this with an error code (Described in Design By Contract). As the slug will be encoded into an url, rules for url apply.\n\nWhen a problem occurs during the request, the url-shortener can send a problem report message. This RFC defines a set of problem codes that can be used to identify the problem, see Problem Reports below.\nShortened URL\nMessage sent by the url-shortener to the long-url-provider to share the shortened url.\nDIDComm V1 Example:\n{\n  \"@type\": \"https://didcomm.org/shorten-url/1.0/shortened-url\",\n  \"@id\": \"\",\n  \"shortened_url\": \"\",\n  \"expires_time\":,\n  \"~thread\": {\n    \"thid\": \"\"\n  }\n}\n\nDIDComm V2 Example:\n{\n  \"type\": \"https://didcomm.org/shorten-url/1.0/shortened-url\",\n  \"id\": \"\",\n  \"thid\": \"\",\n  \"body\": {\n    \"shortened_url\": \"\",\n    \"expires_time\":\n}\n}\n\nDescription of the fields:\n\nshortened_url -- (required) The shortend version of the url\nexpires_time -- (optional) Timestamp after which the shortened url is no longer valid. For privacy reasons, the url-shortener MUST invalidate the shortend url after the specified timestamp. Follows the semantics of the _time property as defined in RFC 0074: DIDComm Best Practices. If not defined it means the shortened url will be valid indefinitely (or until the url is invalidated using the invalidate-shortened-url message).\n\nThe message MUST inclue the thid header (in DIDComm v2) or the ~thread.thid decorator (in DIDComm v1) with the @id value of the Request Shortened URL message.\nInvalidate Shortened URL\nMessage sent by the long-url-provider to the url-shortener to invalidate a shortened url. This is useful if the short url is no longer needed and reduces the chance of unwanted exposure. If the long-url-provider is authorized to invalidate the shortened url, the url-shortener SHOULD invalidate the url due to privacy concerns.\nDIDComm V1 Example:\n{\n  \"@type\": \"https://didcomm.org/shorten-url/1.0/invalidate-shortened-url\",\n  \"@id\": \"\",\n  \"shortened_url\": \"\"\n}\n\nDIDComm V2 Example:\n{\n  \"type\": \"https://didcomm.org/shorten-url/1.0/invalidate-shortened-url\",\n  \"id\": \"\",\n  \"body\": {\n    \"shortened_url\": \"\"\n  }\n}\n\nDescription of the fields:\n\nshortened_url -- (required) The shortened url that should be invalidated.\n\nIt is important to note the url-shortener MUST only invalidate the short url if the request was made by a connection authorized to do so. This doesn't necesarily have to be the same connection as the one that requested the short url, but there should be caution in who can invalidate which short url.\nIf the url-shortener has invalidated the short url, it MUST send an Ack message (DIDComm v1) with status value of OK OR an empty message with the ack header including the id of the invalidate-shortened-url message (DIDComm v2).\nStandard URL Shortening\nThe standards process for shortening an URL follows the process as used by most commercial URL shorteners.\nWhen the shortened URL is requested, the url-shortener MUST respond with a status code of 301 or 302 and include a Location header specifcing header specifying the long url.\nCollateral\nDrawbacks:\n\nUsing another agent as url shortener leaks some information about the connections an agent makes to the other agent. However in the case of a mediator, where this protocol will probably be most often used, as mobile edge agents can't create shortened urls themeslves, and the mediator already keeps a list of all the registered keys from RFC 0211, this doesn't leak a lot of extra information.\nUsing the mediator as a url shortener adds extra dependency on the mediator to be avaiable and act in your favor. However, as the mediator already plays a crucial role in routing messages, it doesn't add a lot of extra trust in the mediator.\n\nPrior Art:\n\nen.wikipedia.org/wiki/URL_shortening\nhttps://github.com/hyperledger/aries-rfcs/tree/main/features/0434-outofband#url-shortening\nhttps://github.com/hyperledger/aries-rfcs/blob/main/concepts/0268-unified-didcomm-agent-deeplinking/README.md#invitation-page\nhttps://identity.foundation/didcomm-messaging/spec/#short-url-message-retrieval\n\nL10n\nLocalization may be implemented by means of L10n extension\nImplementations\nEndnotes\nFuture Considerations"},{"slug":"survey/0.1/","title":"Survey","tags":["survey","questionnaire","JSON-forms"],"license":"MIT","publisher":"stephanbruijnis","avatar":"https://avatars.githubusercontent.com/u/7125228?v=4&s=48","version":"0.1","status":"Proposed","summary":"A protocol where a survey (JSON Forms) is sent by the requester to the responder. The responder then replies with the answers or declines the survey.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/survey/0.1","html":"Summary\nThe Survey protocol enables a JSONForms based request-response interaction to be carried out across a DIDComm channel. An agent sends a survey request to be completed by another agent and gets back the answers message in a subsequent DIDComm message.\nMotivation\nSurveys are an important method for organizations to gather data from a sample of people to understand the population better and make informed business decisions. These surveys should be reliable, usable and customizable to be used in a wide variety of contexts. JSON Forms utilizes the capabilities of JSON and JSON schema and provides a simple and declarative way of describing forms. This reusable framework allows organizations to declare forms, including data-binding, input validation, and rule-based visibility.\nTutorial\nName and Version\nThis is the survey protocol. It is uniquely identified by the URI:\n\"https://didcomm.org/survey/0.1\"\n\nKey Concepts\nThe protocol consists of a DIDComm request message carrying a JSON survey request to a responding agent, and a second message that carries the answers of the responder to the survey back to the client of the first message.\nBasic Walkthrough\nThe survey protocol requires an active DIDComm connection before it can proceed. One agent behaves as a requester in the protocol and the other agent represents a responder. Conceptually the requester sends a message to the responder containing the survey (questions-schema, ui-schema, initial data, and internationalization data) which is rendered as a survey in the wallet of the responder. The responder can either decline the survey or complete the survey.\nThe protocol can only be initiated by the requester by selecting the survey and connection. The protocol ends when the responder replies with an answer or declines. At any time a requester can send another survey to the connection.\nRoles\nThere are two parties in a typical survey interaction. The first party, requester, issues the survey with its schemata and the second party, responder, responds with the answer-data. The parties must have already exchanged pairwise keys and created a connection. These keys can be used to encrypt and verify the response. When the response is received by the requestion, the requestor can know with a high level of certainty that it was sent by responder.\nIn this tutorial Alice (the requester) initiates the interaction, Alice creates the survey and sends it to Bob. The survey includes the questions, ui, initial data and i18n data.\nIn this tutorial, Bob (the responder) receives the request and must respond to the survey (or decline it).\nStates\nThis protocol follows the request-response protocol style and only requires the simple state of producing a conversational message and waiting for a response.\nThe abandoned and completed states are terminal states and there is no expectation that the protocol can be continued after reaching those states.\nEither party may send a problem-report message earlier in the flow to terminate the protocol before its normal conclusion.\nStates for Requester\nThe requester agent goes through the following states:\n\nrequest-sent\ncompleted\n\nThe state transition table for the requester is:\n\nState/Event\nSend Request\nReceive Response\nSend or Receive Problem Report\n\nstart\nTransition to request-sent\n\nrequest-sent\n\nTransition to completed\nTransition to abandoned\n\ncompleted\n\nabandoned\n\nStates for Responder\nThe responder agent goes through the following states:\n\nrequest-received\ncompleted\n\nThe state transition table for the responder is:\n\nState/Event\nReceive Request\nSend Response\nSend or Receive Problem Report\n\nstart\nTransition to request-received\n\nrequest-received\n\nTransition to completed\nTransition to abandoned\n\ncompleted\n\nabandoned\n\nAfter receiving a survey-request, the responder may send a problem-report to the requestor using the information in the request to decline (abandon) the protocol.\nMessages\nSurvey Request Message\nThe protocol begins when the requester sends a survey-request message to the responder:\nDIDComm V1 Example:\n{\n    \"@type\": \"https://didcomm.org/survey/0.1/request\",\n    \"@id\": \"8192855c-89f3-5bb5-4971-7be10cbc6c71\",\n    \"~thread\": {\n        \"thid\": \"5689db78-5123-2aad-448d-0203107fee11\"\n    },\n    \"request\": {\n        \"survey_id\": \"750d9731-562b-f8a9-48df-89b12a1ec7f3\",\n        \"survey_schema\": {\n            \"json_object\": \"json object defining the survey schema with the questions, answers and validations\"\n        },\n        \"ui_schema\": {\n            \"json_object\": \"json object defining the ui schema such as layout, controls, help text to aid rendering of the survey\"\n        },\n        \"init_data\": {\n            \"json_object\": \"json object containing the data to prefill answers\"\n        },\n        \"i18n_data\": {\n            \"json object\": \"json object containing the translations\"\n        }\n    },\n    \"expires_time\": \"2018-12-13T17:29:06+0000\"\n}\n\nThe items in the message are as follows:\n\n@type -- required, must be as above\n@id -- required, must be as defined in [RFC 0005 DIDComm]\n~thread -- required, must be as defined in [RFC 0008 Message ID and Threading]\nrequest -- required, an item containing a JSONForms JSON structures. must be a single JSONForms request\n\nsurvey_id -- required, contains the survey identifier to uniquely identify the survey in the business logic\nsurvey_schema -- required, contains the questions, answers and validations\nui_schema -- required, contains layout, controls, help labels\ninit_data -- optional, it can be used to prefill/preselect answers for questions in the survey\ni18n_data -- optional, contains translations for the questions, answer options and labels\n\nexpires_time is optional\n\nDIDComm V2 Example:\n{\n    \"type\": \"https://didcomm.org/survey/0.1/request\",\n    \"id\": \"8192855c-89f3-5bb5-4971-7be10cbc6c71\",\n    \"thid\": \"5689db78-5123-2aad-448d-0203107fee11\",\n    \"body\": {\n        \"request\": {\n            \"survey_id\": \"750d9731-562b-f8a9-48df-89b12a1ec7f3\",\n            \"survey_schema\": {\n                \"json_object\": \"json object defining the survey schema with the questions, answers and validations\"\n            },\n            \"ui_schema\": {\n                \"json_object\": \"json object defining the ui schema such as layout, controls, help text to aid rendering of the survey\"\n            },\n            \"init_data\": {\n                \"json_object\": \"json object containing the data to prefill answers\"\n            },\n            \"i18n_data\": {\n                \"json object\": \"json object containing the translations\"\n            }\n        }\n    },\n    \"expires_time\": \"2018-12-13T17:29:06+0000\"\n}\n\nExample Request Message with a survey\nThe survey is declared as JSON objects in the Survey Request Message. In this example, we use a survey_schema which is an object with three properties name, birthDate and nationality.\nSurvey Schema:\n{\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\",\n        \"minLength\": 3,\n        \"description\": \"Please enter your name\"\n      },\n      \"birthDate\": {\n        \"type\": \"string\",\n        \"format\": \"date\"\n      },\n      \"nationality\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"DE\",\n          \"IT\",\n          \"JP\",\n          \"US\",\n          \"NL\",\n          \"Other\"\n        ]\n      }\n    },\n    \"required\": [\n      \"name\",\n      \"nationality\"\n    ]\n  }\n\nThe UI schema describes the general layout of the survey. It is a JSON object that defines the controls, layouts (horizontal, vertical, groups) and rules.\nUI Schema:\n{\n    \"type\": \"HorizontalLayout\",\n    \"elements\": [\n        {\n            \"type\": \"Control\",\n            \"label\": \"Name\",\n            \"scope\": \"#/properties/name\"\n        },\n        {\n            \"type\": \"Control\",\n            \"label\": \"Birth Date\",\n            \"scope\": \"#/properties/birthDate\"\n        },\n        {\n            \"type\": \"Control\",\n            \"scope\": \"#/properties/nationality\"\n        }\n    ]\n}\n\nThe init_data represents an object containing the data to be rendered in the survey. This can be used to prepopulate the form with data.\nInitial Data:\n{\n  \"name\": \"John Doe\",\n  \"birthDate\": \"1985-06-02\"\n}\n\nProvides internationalization data for handling the translations (and to render locale specific UI elements, e.g. formatting of numbers). This example translates the Survey title, description and name property.\nI18n Data:\n{\n    \"English\": {\n        \"title\": \"Hello\",\n        \"description\": \"Test\",\n        \"name\": {\n            \"label\": \"What is your name?\"\n        }\n    },\n    \"Spanish\": {\n        \"title\": \"Hola\",\n        \"description\": \"Test\",\n        \"name\": {\n            \"label\": \"Que es nombre?\"\n        }\n    }\n}\n\nFull example Survey request message:\n{\n    \"type\": \"https://didcomm.org/survey/0.1/request\",\n    \"id\": \"8192855c-89f3-5bb5-4971-7be10cbc6c71\",\n    \"thid\": \"5689db78-5123-2aad-448d-0203107fee11\",\n    \"body\": {\n        \"request\": {\n            \"survey_id\": \"750d9731-562b-f8a9-48df-89b12a1ec7f3\",\n            \"survey_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"minLength\": 3,\n                        \"description\": \"Please enter your name\"\n                    },\n                    \"birthDate\": {\n                        \"type\": \"string\",\n                        \"format\": \"date\"\n                    },\n                    \"nationality\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"DE\",\n                            \"IT\",\n                            \"JP\",\n                            \"US\",\n                            \"NL\",\n                            \"Other\"\n                        ]\n                    }\n                },\n                \"required\": [\n                    \"name\",\n                    \"nationality\"\n                ]\n            },\n            \"ui_schema\": {\n                \"type\": \"HorizontalLayout\",\n                \"elements\": [\n                    {\n                        \"type\": \"Control\",\n                        \"label\": \"Name\",\n                        \"scope\": \"#/properties/name\"\n                    },\n                    {\n                        \"type\": \"Control\",\n                        \"label\": \"Birth Date\",\n                        \"scope\": \"#/properties/birthDate\"\n                    },\n                    {\n                        \"type\": \"Control\",\n                        \"scope\": \"#/properties/nationality\"\n                    }\n                ]\n            }\n        },\n        \"init_data\": {\n            \"name\": \"John Doe\",\n            \"birthDate\": \"1985-06-02\"\n        },\n        \"i18n_data\": {\n            \"English\": {\n                \"title\": \"Hello\",\n                \"description\": \"Test\",\n                \"name\": {\n                    \"label\": \"What is your name?\"\n                }\n            },\n            \"Spanish\": {\n                \"title\": \"Hola\",\n                \"description\": \"Test\",\n                \"name\": {\n                    \"label\": \"Que es nombre?\"\n                }\n            }\n        }\n    },\n    \"expires_time\": \"2018-12-13T17:29:06+0000\"\n}\n\nSurvey Response Message\nA response message is sent by the responder following the completion of the survey to convey the answers to the requester.\nIf the request is unrecognizable as a JSONForms survey such that a survey cannot be rendered, the server SHOULD send a [RFC 0035 Report Problem] message to the client.\nDIDComm V1 Example:\n{\n    \"@type\": \"https://didcomm.org/survey/0.1/request\",\n    \"@id\": \"8192855c-89f3-5bb5-4971-7be10cbc6c71\",\n    \"~thread\": {\n        \"thid\": \"5689db78-5123-2aad-448d-0203107fee11\"\n    },\n    \"response\": {\n        \"response_type\": \"data\",\n        \"data\": {\n            \"json_object\": \"json object containing the answers given by the responder\"\n        },\n    },\n}\n\nDIDComm V2 Example:\n{\n    \"type\": \"https://didcomm.org/survey/0.1/request\",\n    \"id\": \"8192855c-89f3-5bb5-4971-7be10cbc6c71\",\n    \"thid\": \"5689db78-5123-2aad-448d-0203107fee11\",\n    \"body\": {\n        \"response\": {\n            \"response_type\": \"data\",\n            \"data\": {\n                \"json_object\": \"json object containing the answers given by the responder\"\n            }\n        }\n    }\n}\n\nThe items in the message are as follows:\n\n@type -- required, must be as above\n@id -- required, must be as defined in [RFC 0005 DIDComm]\n~thread -- required, must be as defined in [RFC 0008 Message ID and Threading], same as the request\nrequest -- required, an item containing a JSONForm as JSON objects. must be a single JSONForms request\n\nresponse_type -- required, the type of response, must be data if the survey was completed and returns the answer data. If the responder declines the survey the response_type must be decline\ndata -- required, if response_type is data and will contain the answers provided by the responder, optional with other response_type 's. And will follow the same object structure as the init_data in the Request\n\nProblem Report Message\nA [RFC 0035 Report Problem] message SHOULD be sent by the responder instead of a response message only if the request is unrecognizable as a JSONForms message.\nL10n\nTranslations for the survey are provided in the i18n_data attribute of the survey request message.\nPrior art\nThis protocol has similar goals to the RFC 0113 Question & Answer DIDComm protocol, but changes the approach to more complex use cases where the business case requires a broader set of questions and answers for a larger set of respondents. This Survey protocol can be used for multiple questions and answers in a single form (i.e. surveys) and in a more asynchronous environment (a -nearly- synchronous response is not expected). Surveys would typically be used to gather data from a group of people, unlike Question and Answer which appears to be more directed at a single respondent in a specific context.\nImplementations\nThe following lists the implementations (if any) of this RFC. Please do a pull request to add your implementation. If the implementation is open source, include a link to the repo or to the implementation within the repo. Please be consistent in the \"Name\" field so that a mechanical processing of the RFCs can generate a list of all RFCs supported by an Aries implementation.\n\nName / Link\nImplementation Notes\n\ncredo-ts-survey\nCredo extension library\n\nfarmworker-wallet-os\nFarmworker Wallet OS, Credo SDK for Mendix low-code platform"},{"slug":"trust-ping/2.0/","title":"Trust Ping","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The trust-ping protocol defined in the DIDComm Messaging Spec. This enables the sender and recipient to engage in an exchange of trust pings.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/trust-ping/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#trust-ping-protocol-20"},{"slug":"user-profile/1.0/","title":"User Profile","tags":[],"license":"MIT","publisher":"genaris","avatar":"https://avatars.githubusercontent.com/u/4800462?v=4&s=48","version":"1.0","status":"Demonstrated","summary":"A simple protocol for exchanging user profile information between parties.","modifiedDate":"Mon Mar 17 2025 19:26:22 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/user-profile/1.0","html":"Summary\nA simple protocol for exchanging user profile information between parties.\nData exposed and exchanged within this protocol can be seen as a complement to the basic and untrusted connection information exchanged in Out-of-Band Invitation messages.\nMotivation\nModern communication applications normally need some user-friendly information about the other party. For that purpose it's needed to provide a common mechanism to sharing and retrieving user profile information, which might change over time, in more secure and efficient way than the usual Invitation messages.\nRoles\nThere are two roles in this protocol:\n\nsender - The agent that is sending their user profile\nreceiver - The agent that is receiving the user profile from another one\n\nBasic Walkthrough\nExchanges within this protocol involve a single message when an agent wants to share their profile (or any update to it) without asking for other party profile; two messages might be exchanged in case of Request Profile or Profile with send_back_yours enabled.\n\nStates\nAs of current specification, no particular state transitions are defined.\nMessage Reference\nThis section explains the structure of the different messages defined for this protocol.\nProfile\nThis message is used to send user profile to another party.\nDescription of the fields:\n\nprofile : Object containing all supported fields that must be set or updated. Any absent field means that there is no change on that field so the recipient must keep the previous value for this connection. When a field previously present needs to be removed, it must be explicitly set to null or an empty string (e.g. `{ \"displayPicture\": null }``).\n\ndisplayName : String containing user display name in the language specified by localization\ndisplayPicture :  Reference to an appended attachment which might contain a link to download the picture or an embedded base64 picture. It can also contain a message to retrieve the file through Media Sharing protocol\ndescription : free text containing user's bio\n\nsend_back_yours : When this parameter is defined and set to true, the recipient is expected to send another Profile message containing their profile. Such message should include this message ID as pthid. Agents must not include this parameter when the message is created as a result of another one.\n\nNote : When send_back_yours is set, the other party is asked to send their profile. However, it might either choose not to do it or send it in another instance of this protocol. Therefore, the protocol can be considered properly finished as soon as Profile message is successfully sent.\n\nDIDComm v1 example:\n{\n    \"@id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"@type\": \" /profile\",\n    \"profile\": {\n        \"displayName\": \"John Doe\",\n        \"displayPicture\": \"#item1\",\n        \"description\": \"This is my bio\"\n    }, \n    \"send_back_yours\": true,\n    \"~attach\": [{\n        \"@id\": \"item1\",\n        \"byte_count\": \"23894\",\n        \"mime-type\": \"image/png\",\n        \"filename\": \"image1.png\",\n        \"data\": {\n            \"links\": [ \"https://fileserver.com/ref1-uuid\" ]\n        },\n    }]    \n}\n\nDIDComm v2 example:\n{\n    \"id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"type\": \" /profile\",\n    \"body\": {\n        \"profile\": {\n            \"displayName\": \"John Doe\",\n            \"displayPicture\": \"#item1\",\n            \"description\": \"This is my bio\"\n        }, \n        \"send_back_yours\": true,\n    },\n    \"attachments\": [{\n        \"@id\": \"item1\",\n        \"byte_count\": \"23894\",\n        \"media_type\": \"image/png\",\n        \"filename\": \"image1.png\",\n        \"data\": {\n            \"base64\": \"iVBORw0KGgoAAAANSUhEUgAAAKsAAADV...\"\n        },\n    }]    \n}\n\nRequest Profile\nThis message is used to request a profile. Recipient is expected to send their profile at its current state. This will trigger a new instance of this protocol, using Request Profile message's id as pthid.\nDIDComm v1 example:\n{\n    \"@id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"@type\": \" /request-profile\",\n    \"query\": [ \"displayName\", \"displayPicture\", \"description\" ]\n}\n\nDIDComm v2 example:\n{\n    \"id\": \"8ba049e6-cc46-48fb-bfe0-463084d66324\",\n    \"type\": \" /request-profile\",\n    \"body\": {\n        \"query\": [ \"displayName\", \"displayPicture\", \"description\" ]\n    }\n}\n\nquery parameter is optional and defines which fields the requester is interested in. If no specified, responder must send their full profile.\nImplementations\nCurrent implementations of this protocol are listed below:\n\nName / Link\nImplementation Notes\n\nAries JavaScript User Profile\nInitial implementation as an extension module for Aries Framework JavaScript. Used in 2060.io Mobile Agent and Service Agent.\n\nEndnotes\nFuture Considerations"}],"allLicenses":["MIT"]}},
    "staticQueryHashes": ["3000541721","3766577012"]}